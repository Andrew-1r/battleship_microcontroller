
battleship.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ce  00800100  000021fc  00002290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001aa  008002ce  008002ce  0000245e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c5d  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001206  00000000  00000000  00005461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ce7  00000000  00000000  00006667  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c0  00000000  00000000  00008350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cae  00000000  00000000  00008c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c4e  00000000  00000000  000098be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000b50c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 02 	jmp	0x474	; 0x474 <__ctors_end>
       4:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
       8:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
       c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      10:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      14:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_5>
      18:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      1c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      20:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      24:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      28:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      2c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      30:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      34:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      38:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      3c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      40:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__vector_16>
      44:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      48:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      4c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      50:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_20>
      54:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__vector_21>
      58:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      5c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      60:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      64:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      68:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      6c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      70:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      74:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      78:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2306>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2282>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 50 72     CSSE2010/7201 Pr
      c4:	6f 6a 65 63 74 20 62 79 20 41 6e 64 72 65 77 20     oject by Andrew 
      d4:	57 69 6c 73 6f 6e 20 2d 20 34 38 32 38 30 34 31     Wilson - 4828041
      e4:	31 00                                               1.

000000e6 <__c.2280>:
      e6:	20 5c 24 24 24 24 24 24 24 20 20 5c 24 24 20 20      \$$$$$$$  \$$  
      f6:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 20      \$$   \$$      
     106:	20 5c 24 24 20 20 20 20 5c 24 24 24 24 24 24 24      \$$    \$$$$$$$
     116:	24 20 5c 24 24 24 24 24 24 24 24 20 20 5c 24 24     $ \$$$$$$$$  \$$
     126:	24 24 24 24 20 20 5c 24 24 20 20 20 5c 24 24 20     $$$$  \$$   \$$ 
     136:	5c 24 24 24 24 24 24 20 5c 24 24 20 20 20 20 20     \$$$$$$ \$$     
     146:	20 00                                                .

00000148 <__c.2278>:
     148:	7c 20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20     | $$    $$| $$  
     158:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 20 20     | $$  | $$      
     168:	7c 20 24 24 20 20 20 7c 20 24 24 20 20 20 20 20     | $$   | $$     
     178:	5c 7c 20 24 24 20 20 20 20 20 5c 20 5c 24 24 20     \| $$     \ \$$ 
     188:	20 20 20 24 24 7c 20 24 24 20 20 7c 20 24 24 7c        $$| $$  | $$|
     198:	20 20 20 24 24 20 5c 7c 20 24 24 20 20 20 20 20        $$ \| $$     
     1a8:	20 00                                                .

000001aa <__c.2276>:
     1aa:	7c 20 24 24 5f 5f 2f 20 24 24 7c 20 24 24 20 20     | $$__/ $$| $$  
     1ba:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 20 20     | $$  | $$      
     1ca:	7c 20 24 24 20 20 20 7c 20 24 24 5f 5f 5f 5f 5f     | $$   | $$_____
     1da:	20 7c 20 24 24 5f 5f 5f 5f 5f 20 7c 20 20 5c 5f      | $$_____ |  \_
     1ea:	5f 7c 20 24 24 7c 20 24 24 20 20 7c 20 24 24 20     _| $$| $$  | $$ 
     1fa:	5f 7c 20 24 24 5f 20 7c 20 24 24 20 20 20 20 20     _| $$_ | $$     
     20a:	20 00                                                .

0000020c <__c.2274>:
     20c:	7c 20 24 24 24 24 24 24 24 5c 7c 20 24 24 24 24     | $$$$$$$\| $$$$
     21c:	24 24 24 24 20 20 7c 20 24 24 20 20 20 20 20 20     $$$$  | $$      
     22c:	7c 20 24 24 20 20 20 7c 20 24 24 20 20 20 20 20     | $$   | $$     
     23c:	20 7c 20 24 24 24 24 24 20 20 20 20 5f 5c 24 24      | $$$$$    _\$$
     24c:	24 24 24 24 5c 7c 20 24 24 24 24 24 24 24 24 20     $$$$\| $$$$$$$$ 
     25c:	20 7c 20 24 24 20 20 7c 20 24 24 24 24 24 24 24      | $$  | $$$$$$$
     26c:	20 00                                                .

0000026e <__c.2272>:
     26e:	7c 20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20     | $$    $$| $$  
     27e:	20 20 24 24 20 20 7c 20 24 24 20 20 20 20 20 20       $$  | $$      
     28e:	7c 20 24 24 20 20 20 7c 20 24 24 20 20 20 20 20     | $$   | $$     
     29e:	20 7c 20 24 24 20 20 5c 20 20 20 20 5c 24 24 20      | $$  \    \$$ 
     2ae:	20 20 20 5c 20 7c 20 24 24 20 20 20 20 24 24 20        \ | $$    $$ 
     2be:	20 7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 24      | $$  | $$    $
     2ce:	24 00                                               $.

000002d0 <__c.2270>:
     2d0:	7c 20 24 24 5f 5f 2f 20 24 24 7c 20 24 24 5f 5f     | $$__/ $$| $$__
     2e0:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 20 20     | $$  | $$      
     2f0:	7c 20 24 24 20 20 20 7c 20 24 24 20 20 20 20 20     | $$   | $$     
     300:	20 7c 20 24 24 5f 5f 20 20 20 20 7c 20 24 24 5f      | $$__    | $$_
     310:	5f 5f 5c 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20     __\$$| $$__| $$ 
     320:	20 7c 20 24 24 20 20 7c 20 24 24 5f 5f 2f 20 24      | $$  | $$__/ $
     330:	24 00                                               $.

00000332 <__c.2268>:
     332:	7c 20 24 24 24 24 24 24 24 5c 7c 20 20 24 24 24     | $$$$$$$\|  $$$
     342:	24 24 24 5c 5c 24 24 24 24 24 24 24 24 20 5c 24     $$$\\$$$$$$$$ \$
     352:	24 24 24 24 24 24 24 7c 20 24 24 20 20 20 20 20     $$$$$$$| $$     
     362:	20 7c 20 24 24 24 24 24 24 24 24 7c 20 20 24 24      | $$$$$$$$|  $$
     372:	24 24 24 24 5c 7c 20 24 24 20 20 7c 20 24 24 20     $$$$\| $$  | $$ 
     382:	5c 24 24 24 24 24 24 7c 20 24 24 24 24 24 24 24     \$$$$$$| $$$$$$$
     392:	5c 00                                               \.

00000394 <__c.2266>:
     394:	7c 20 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20     |       \  /    
     3a4:	20 20 5c 7c 20 20 20 20 20 20 20 20 5c 7c 20 20       \|        \|  
     3b4:	20 20 20 20 20 20 5c 7c 20 20 5c 20 20 20 20 20           \|  \     
     3c4:	20 7c 20 20 20 20 20 20 20 20 5c 20 2f 20 20 20      |        \ /   
     3d4:	20 20 20 5c 20 7c 20 20 5c 20 20 7c 20 20 5c 7c        \ |  \  |  \|
     3e4:	20 20 20 20 20 20 5c 7c 20 20 20 20 20 20 20 5c           \|       \
     3f4:	20 00                                                .

000003f6 <__c.2264>:
     3f6:	20 5f 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f      _______    ____
     406:	5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 5f 20 20 5f 5f     __  ________  __
     416:	5f 5f 5f 5f 5f 5f 20 20 5f 5f 20 20 20 20 20 20     ______  __      
     426:	20 20 5f 5f 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 5f       ________   ___
     436:	5f 5f 5f 20 20 20 5f 5f 20 20 20 20 5f 5f 20 20     ___   __    __  
     446:	5f 5f 5f 5f 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20     ______  _______ 
     456:	20 00                                                .

00000458 <__c.2054>:
     458:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000045f <__c.2050>:
     45f:	1b 5b 25 64 6d 00                                   .[%dm.

00000465 <__c.2040>:
     465:	1b 5b 32 4a 00                                      .[2J.

0000046a <__c.2025>:
     46a:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

00000474 <__ctors_end>:
     474:	11 24       	eor	r1, r1
     476:	1f be       	out	0x3f, r1	; 63
     478:	cf ef       	ldi	r28, 0xFF	; 255
     47a:	d8 e0       	ldi	r29, 0x08	; 8
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	cd bf       	out	0x3d, r28	; 61

00000480 <__do_copy_data>:
     480:	12 e0       	ldi	r17, 0x02	; 2
     482:	a0 e0       	ldi	r26, 0x00	; 0
     484:	b1 e0       	ldi	r27, 0x01	; 1
     486:	ec ef       	ldi	r30, 0xFC	; 252
     488:	f1 e2       	ldi	r31, 0x21	; 33
     48a:	02 c0       	rjmp	.+4      	; 0x490 <__do_copy_data+0x10>
     48c:	05 90       	lpm	r0, Z+
     48e:	0d 92       	st	X+, r0
     490:	ae 3c       	cpi	r26, 0xCE	; 206
     492:	b1 07       	cpc	r27, r17
     494:	d9 f7       	brne	.-10     	; 0x48c <__do_copy_data+0xc>

00000496 <__do_clear_bss>:
     496:	24 e0       	ldi	r18, 0x04	; 4
     498:	ae ec       	ldi	r26, 0xCE	; 206
     49a:	b2 e0       	ldi	r27, 0x02	; 2
     49c:	01 c0       	rjmp	.+2      	; 0x4a0 <.do_clear_bss_start>

0000049e <.do_clear_bss_loop>:
     49e:	1d 92       	st	X+, r1

000004a0 <.do_clear_bss_start>:
     4a0:	a8 37       	cpi	r26, 0x78	; 120
     4a2:	b2 07       	cpc	r27, r18
     4a4:	e1 f7       	brne	.-8      	; 0x49e <.do_clear_bss_loop>
     4a6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <main>
     4aa:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <_exit>

000004ae <__bad_interrupt>:
     4ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004b2 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void)
{
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     4b2:	e8 e6       	ldi	r30, 0x68	; 104
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	82 60       	ori	r24, 0x02	; 2
     4ba:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     4bc:	8b b3       	in	r24, 0x1b	; 27
     4be:	82 60       	ori	r24, 0x02	; 2
     4c0:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     4c2:	ec e6       	ldi	r30, 0x6C	; 108
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	8f 60       	ori	r24, 0x0F	; 15
     4ca:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     4cc:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <__data_end>
     4d0:	08 95       	ret

000004d2 <button_pushed>:

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0)
     4d2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <__data_end>
     4d6:	18 16       	cp	r1, r24
     4d8:	14 f5       	brge	.+68     	; 0x51e <button_pushed+0x4c>
	{
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     4da:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     4de:	6f b7       	in	r22, 0x3f	; 63
		cli();
     4e0:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <button_pushed+0x26>
		{
			button_queue[i - 1] = button_queue[i];
     4e6:	f9 01       	movw	r30, r18
     4e8:	e1 53       	subi	r30, 0x31	; 49
     4ea:	fd 4f       	sbci	r31, 0xFD	; 253
     4ec:	40 81       	ld	r20, Z
     4ee:	f9 01       	movw	r30, r18
     4f0:	e2 53       	subi	r30, 0x32	; 50
     4f2:	fd 4f       	sbci	r31, 0xFD	; 253
     4f4:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     4f6:	9f 5f       	subi	r25, 0xFF	; 255
     4f8:	29 2f       	mov	r18, r25
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 91 ce 02 	lds	r20, 0x02CE	; 0x8002ce <__data_end>
     500:	04 2e       	mov	r0, r20
     502:	00 0c       	add	r0, r0
     504:	55 0b       	sbc	r21, r21
     506:	24 17       	cp	r18, r20
     508:	35 07       	cpc	r19, r21
     50a:	6c f3       	brlt	.-38     	; 0x4e6 <button_pushed+0x14>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     50c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <__data_end>
     510:	91 50       	subi	r25, 0x01	; 1
     512:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <__data_end>
		
		if (interrupts_were_enabled)
     516:	66 23       	and	r22, r22
     518:	1c f4       	brge	.+6      	; 0x520 <button_pushed+0x4e>
		{
			// Turn them back on again
			sei();
     51a:	78 94       	sei
     51c:	08 95       	ret
	queue_length = 0;
}

int8_t button_pushed(void)
{
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     51e:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     520:	08 95       	ret

00000522 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect)
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	4f 93       	push	r20
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     53a:	43 b1       	in	r20, 0x03	; 3
     53c:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	26 c0       	rjmp	.+76     	; 0x58e <__vector_5+0x6c>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     542:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <__data_end>
     546:	94 30       	cpi	r25, 0x04	; 4
     548:	0c f5       	brge	.+66     	; 0x58c <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     54a:	24 2f       	mov	r18, r20
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	08 2e       	mov	r0, r24
     550:	02 c0       	rjmp	.+4      	; 0x556 <__vector_5+0x34>
     552:	35 95       	asr	r19
     554:	27 95       	ror	r18
     556:	0a 94       	dec	r0
     558:	e2 f7       	brpl	.-8      	; 0x552 <__vector_5+0x30>
     55a:	20 ff       	sbrs	r18, 0
     55c:	17 c0       	rjmp	.+46     	; 0x58c <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin)))
     55e:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <last_button_state>
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	08 2e       	mov	r0, r24
     566:	02 c0       	rjmp	.+4      	; 0x56c <__vector_5+0x4a>
     568:	35 95       	asr	r19
     56a:	27 95       	ror	r18
     56c:	0a 94       	dec	r0
     56e:	e2 f7       	brpl	.-8      	; 0x568 <__vector_5+0x46>
     570:	20 fd       	sbrc	r18, 0
     572:	0c c0       	rjmp	.+24     	; 0x58c <__vector_5+0x6a>
				{
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     574:	e0 91 ce 02 	lds	r30, 0x02CE	; 0x8002ce <__data_end>
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	9e 0f       	add	r25, r30
     57c:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <__data_end>
     580:	0e 2e       	mov	r0, r30
     582:	00 0c       	add	r0, r0
     584:	ff 0b       	sbc	r31, r31
     586:	e1 53       	subi	r30, 0x31	; 49
     588:	fd 4f       	sbci	r31, 0xFD	; 253
     58a:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     58c:	8f 5f       	subi	r24, 0xFF	; 255
     58e:	84 30       	cpi	r24, 0x04	; 4
     590:	c0 f2       	brcs	.-80     	; 0x542 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     592:	40 93 d3 02 	sts	0x02D3, r20	; 0x8002d3 <last_button_state>
}
     596:	ff 91       	pop	r31
     598:	ef 91       	pop	r30
     59a:	9f 91       	pop	r25
     59c:	8f 91       	pop	r24
     59e:	4f 91       	pop	r20
     5a0:	3f 91       	pop	r19
     5a2:	2f 91       	pop	r18
     5a4:	0f 90       	pop	r0
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	0f 90       	pop	r0
     5aa:	1f 90       	pop	r1
     5ac:	18 95       	reti

000005ae <show_start_screen>:
		 0x29,0x39,0x49,0x49,0xf9,0x4b,0x3e,0x00,0x00};
static const uint8_t ship_highlight[ICON_LENGTH] =
		{0x00, 0x00, 0x16, 0x06, 0x02, 0x06, 0x06, 0x06, 0x36, 0x36, 0x06, 0x36, 0x00};

void show_start_screen(void)
{
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	28 97       	sbiw	r28, 0x08	; 8
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     5c4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	2d c0       	rjmp	.+90     	; 0x626 <show_start_screen+0x78>
	{
		col_data = ship_main[col];
     5cc:	e1 2f       	mov	r30, r17
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	ef 54       	subi	r30, 0x4F	; 79
     5d2:	fe 4f       	sbci	r31, 0xFE	; 254
     5d4:	90 81       	ld	r25, Z
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	1d c0       	rjmp	.+58     	; 0x614 <show_start_screen+0x66>
		{
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data>>row & 1)
     5da:	28 2f       	mov	r18, r24
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	49 2f       	mov	r20, r25
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	08 2e       	mov	r0, r24
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <show_start_screen+0x3c>
     5e6:	55 95       	asr	r21
     5e8:	47 95       	ror	r20
     5ea:	0a 94       	dec	r0
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <show_start_screen+0x38>
     5ee:	40 ff       	sbrs	r20, 0
     5f0:	09 c0       	rjmp	.+18     	; 0x604 <show_start_screen+0x56>
			{
				column_colour_data[row] = COLOUR_GREEN;
     5f2:	e1 e0       	ldi	r30, 0x01	; 1
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	ec 0f       	add	r30, r28
     5f8:	fd 1f       	adc	r31, r29
     5fa:	e2 0f       	add	r30, r18
     5fc:	f3 1f       	adc	r31, r19
     5fe:	40 ef       	ldi	r20, 0xF0	; 240
     600:	40 83       	st	Z, r20
     602:	07 c0       	rjmp	.+14     	; 0x612 <show_start_screen+0x64>
			}
			else
			{
				column_colour_data[row] = COLOUR_BLACK;
     604:	e1 e0       	ldi	r30, 0x01	; 1
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	ec 0f       	add	r30, r28
     60a:	fd 1f       	adc	r31, r29
     60c:	e2 0f       	add	r30, r18
     60e:	f3 1f       	adc	r31, r19
     610:	10 82       	st	Z, r1
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
	{
		col_data = ship_main[col];
		for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	88 30       	cpi	r24, 0x08	; 8
     616:	08 f3       	brcs	.-62     	; 0x5da <show_start_screen+0x2c>
			else
			{
				column_colour_data[row] = COLOUR_BLACK;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
     618:	be 01       	movw	r22, r28
     61a:	6f 5f       	subi	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	81 2f       	mov	r24, r17
     620:	0e 94 3d 09 	call	0x127a	; 0x127a <ledmatrix_update_column>
{
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     624:	1f 5f       	subi	r17, 0xFF	; 255
     626:	10 31       	cpi	r17, 0x10	; 16
     628:	88 f2       	brcs	.-94     	; 0x5cc <show_start_screen+0x1e>
				column_colour_data[row] = COLOUR_BLACK;
			}
		}
		ledmatrix_update_column(col, column_colour_data);
	}
}
     62a:	28 96       	adiw	r28, 0x08	; 8
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	08 95       	ret

0000063e <update_start_screen>:

// Update dynamic start screen based on the frame number (0-31)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(int8_t frame_number)
{
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	28 97       	sbiw	r28, 0x08	; 8
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
	// negative numbers are used to pause the animation at the loop point
	if (frame_number < 0)
     654:	88 23       	and	r24, r24
     656:	0c f4       	brge	.+2      	; 0x65a <update_start_screen+0x1c>
     658:	5e c0       	rjmp	.+188    	; 0x716 <update_start_screen+0xd8>
     65a:	18 2f       	mov	r17, r24
	{
		return;
	}
	ledmatrix_shift_display_left();
     65c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <ledmatrix_shift_display_left>
	
	// fill in the rightmost column
	MatrixColumn column_colour_data;
	uint8_t col_data = ship_main[(frame_number+MATRIX_NUM_COLUMNS-1)%ANIMATION_LENGTH];
     660:	e1 2f       	mov	r30, r17
     662:	01 2e       	mov	r0, r17
     664:	00 0c       	add	r0, r0
     666:	ff 0b       	sbc	r31, r31
     668:	cf 01       	movw	r24, r30
     66a:	0f 96       	adiw	r24, 0x0f	; 15
     66c:	69 e3       	ldi	r22, 0x39	; 57
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__divmodhi4>
     674:	bc 01       	movw	r22, r24
     676:	dc 01       	movw	r26, r24
     678:	af 54       	subi	r26, 0x4F	; 79
     67a:	be 4f       	sbci	r27, 0xFE	; 254
     67c:	8c 91       	ld	r24, X
	for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	41 c0       	rjmp	.+130    	; 0x704 <update_start_screen+0xc6>
	{
		// If the relevant font bit is set, we make this a coloured pixel, else blank
		if(col_data>>row & 1)
     682:	49 2f       	mov	r20, r25
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	28 2f       	mov	r18, r24
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	09 2e       	mov	r0, r25
     68c:	02 c0       	rjmp	.+4      	; 0x692 <update_start_screen+0x54>
     68e:	35 95       	asr	r19
     690:	27 95       	ror	r18
     692:	0a 94       	dec	r0
     694:	e2 f7       	brpl	.-8      	; 0x68e <update_start_screen+0x50>
     696:	20 ff       	sbrs	r18, 0
     698:	0e c0       	rjmp	.+28     	; 0x6b6 <update_start_screen+0x78>
		{
			// text is green, ship outline is red
			column_colour_data[row] = (frame_number+MATRIX_NUM_COLUMNS-1)%ANIMATION_LENGTH < ICON_OFFSET ? COLOUR_GREEN : COLOUR_RED;
     69a:	6a 32       	cpi	r22, 0x2A	; 42
     69c:	71 05       	cpc	r23, r1
     69e:	14 f4       	brge	.+4      	; 0x6a4 <update_start_screen+0x66>
     6a0:	20 ef       	ldi	r18, 0xF0	; 240
     6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <update_start_screen+0x68>
     6a4:	2f e0       	ldi	r18, 0x0F	; 15
     6a6:	a1 e0       	ldi	r26, 0x01	; 1
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	ac 0f       	add	r26, r28
     6ac:	bd 1f       	adc	r27, r29
     6ae:	a4 0f       	add	r26, r20
     6b0:	b5 1f       	adc	r27, r21
     6b2:	2c 93       	st	X, r18
     6b4:	26 c0       	rjmp	.+76     	; 0x702 <update_start_screen+0xc4>
		}
		// because there's only 13 columns with the ship icon, it's more efficient to only store those thirteen columns for the
		// yellow, but then there needs to be a bunch of maths to account for this offset
		else  if (frame_number+MATRIX_NUM_COLUMNS-1 >= ICON_OFFSET && frame_number+MATRIX_NUM_COLUMNS-1 < ICON_OFFSET+ICON_LENGTH
     6b6:	21 2f       	mov	r18, r17
     6b8:	01 2e       	mov	r0, r17
     6ba:	00 0c       	add	r0, r0
     6bc:	33 0b       	sbc	r19, r19
     6be:	2b 51       	subi	r18, 0x1B	; 27
     6c0:	31 09       	sbc	r19, r1
     6c2:	2d 30       	cpi	r18, 0x0D	; 13
     6c4:	31 05       	cpc	r19, r1
     6c6:	b0 f4       	brcc	.+44     	; 0x6f4 <update_start_screen+0xb6>
					&& ship_highlight[frame_number+MATRIX_NUM_COLUMNS-1-ICON_OFFSET]>>row & 1)
     6c8:	df 01       	movw	r26, r30
     6ca:	a7 57       	subi	r26, 0x77	; 119
     6cc:	be 4f       	sbci	r27, 0xFE	; 254
     6ce:	2c 91       	ld	r18, X
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	09 2e       	mov	r0, r25
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <update_start_screen+0x9c>
     6d6:	35 95       	asr	r19
     6d8:	27 95       	ror	r18
     6da:	0a 94       	dec	r0
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <update_start_screen+0x98>
     6de:	20 ff       	sbrs	r18, 0
     6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <update_start_screen+0xb6>
		{
			// ship internal is yellow
			column_colour_data[row] = COLOUR_YELLOW;
     6e2:	a1 e0       	ldi	r26, 0x01	; 1
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	ac 0f       	add	r26, r28
     6e8:	bd 1f       	adc	r27, r29
     6ea:	a4 0f       	add	r26, r20
     6ec:	b5 1f       	adc	r27, r21
     6ee:	2f ef       	ldi	r18, 0xFF	; 255
     6f0:	2c 93       	st	X, r18
     6f2:	07 c0       	rjmp	.+14     	; 0x702 <update_start_screen+0xc4>
		}
		else
		{
			column_colour_data[row] = COLOUR_BLACK;
     6f4:	a1 e0       	ldi	r26, 0x01	; 1
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	ac 0f       	add	r26, r28
     6fa:	bd 1f       	adc	r27, r29
     6fc:	a4 0f       	add	r26, r20
     6fe:	b5 1f       	adc	r27, r21
     700:	1c 92       	st	X, r1
	ledmatrix_shift_display_left();
	
	// fill in the rightmost column
	MatrixColumn column_colour_data;
	uint8_t col_data = ship_main[(frame_number+MATRIX_NUM_COLUMNS-1)%ANIMATION_LENGTH];
	for(uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     702:	9f 5f       	subi	r25, 0xFF	; 255
     704:	98 30       	cpi	r25, 0x08	; 8
     706:	08 f4       	brcc	.+2      	; 0x70a <update_start_screen+0xcc>
     708:	bc cf       	rjmp	.-136    	; 0x682 <update_start_screen+0x44>
		else
		{
			column_colour_data[row] = COLOUR_BLACK;
		}
	}
	ledmatrix_update_column(MATRIX_NUM_COLUMNS-1, column_colour_data);
     70a:	be 01       	movw	r22, r28
     70c:	6f 5f       	subi	r22, 0xFF	; 255
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	8f e0       	ldi	r24, 0x0F	; 15
     712:	0e 94 3d 09 	call	0x127a	; 0x127a <ledmatrix_update_column>
}
     716:	28 96       	adiw	r28, 0x08	; 8
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	08 95       	ret

0000072a <initialise_game>:
uint8_t computerConsolePrinter = 2;
uint8_t count = 0;

// Initialise the game by resetting the grid and beat
void initialise_game(void)
{
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	c0 58       	subi	r28, 0x80	; 128
     738:	d1 09       	sbc	r29, r1
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
	// clear the splash screen art
	ledmatrix_clear();
     744:	0e 94 61 09 	call	0x12c2	; 0x12c2 <ledmatrix_clear>
	
	// see "Human Turn" feature for how ships are encoded
	// fill in the grid with the ships
	uint8_t initial_human_grid[GRID_NUM_ROWS][GRID_NUM_COLUMNS] =
     748:	80 e4       	ldi	r24, 0x40	; 64
     74a:	e0 e1       	ldi	r30, 0x10	; 16
     74c:	f1 e0       	ldi	r31, 0x01	; 1
     74e:	de 01       	movw	r26, r28
     750:	11 96       	adiw	r26, 0x01	; 1
     752:	01 90       	ld	r0, Z+
     754:	0d 92       	st	X+, r0
     756:	8a 95       	dec	r24
     758:	e1 f7       	brne	.-8      	; 0x752 <initialise_game+0x28>
		 {SEA,                  SEA,                            CORVETTE|SHIP_END,              SEA,                SEA,                SUBMARINE|SHIP_END,             SEA,                            SEA                 },
		 {DESTROYER|SHIP_END,   SEA,                            CORVETTE|SHIP_END,              SEA,                SEA,                SUBMARINE|SHIP_END,             SEA,                            FRIGATE|SHIP_END    },
		 {DESTROYER,            SEA,                            SEA,                            SEA,                SEA,                SEA,                            SEA,                            FRIGATE             },
		 {DESTROYER|SHIP_END,   SEA,                            CRUISER|HORIZONTAL|SHIP_END,    CRUISER|HORIZONTAL, CRUISER|HORIZONTAL, CRUISER|HORIZONTAL|SHIP_END,    SEA,                            FRIGATE|SHIP_END    },
		 {SEA,                  SEA,                            SEA,                            SEA,                SEA,                SEA,                            SEA,                            SEA                 }};
	uint8_t initial_computer_grid[GRID_NUM_ROWS][GRID_NUM_COLUMNS] =
     75a:	80 e4       	ldi	r24, 0x40	; 64
     75c:	e0 e5       	ldi	r30, 0x50	; 80
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	de 01       	movw	r26, r28
     762:	af 5b       	subi	r26, 0xBF	; 191
     764:	bf 4f       	sbci	r27, 0xFF	; 255
     766:	01 90       	ld	r0, Z+
     768:	0d 92       	st	X+, r0
     76a:	8a 95       	dec	r24
     76c:	e1 f7       	brne	.-8      	; 0x766 <initialise_game+0x3c>
		 {DESTROYER|SHIP_END,   SEA,                            CORVETTE|SHIP_END,              SEA,                SEA,                SUBMARINE|SHIP_END,             SEA,                            FRIGATE|SHIP_END    },
		 {SEA,                  SEA,                            CORVETTE|SHIP_END,              SEA,                SEA,                SUBMARINE|SHIP_END,             SEA,                            SEA                 },
		 {SEA,                  SEA,                            SEA,                            SEA,                SEA,                SEA,                            SEA,                            SEA                 },
		 {SEA,                  CARRIER|HORIZONTAL|SHIP_END,    CARRIER|HORIZONTAL,             CARRIER|HORIZONTAL, CARRIER|HORIZONTAL, CARRIER|HORIZONTAL,             CARRIER|HORIZONTAL|SHIP_END,    SEA                 },
		 {SEA,                  SEA,                            SEA,                            SEA,                SEA,                SEA,                            SEA,                            SEA                 }};
	for (uint8_t i=0; i<GRID_NUM_COLUMNS; i++)
     76e:	00 e0       	ldi	r16, 0x00	; 0
     770:	34 c0       	rjmp	.+104    	; 0x7da <initialise_game+0xb0>
	{
		for (uint8_t j=0; j<GRID_NUM_COLUMNS; j++)
		{
			human_grid[j][i] = initial_human_grid[j][i];
     772:	81 2f       	mov	r24, r17
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	e0 2f       	mov	r30, r16
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	a1 e0       	ldi	r26, 0x01	; 1
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	ac 0f       	add	r26, r28
     78c:	bd 1f       	adc	r27, r29
     78e:	a8 0f       	add	r26, r24
     790:	b9 1f       	adc	r27, r25
     792:	ae 0f       	add	r26, r30
     794:	bf 1f       	adc	r27, r31
     796:	2c 91       	ld	r18, X
     798:	dc 01       	movw	r26, r24
     79a:	a4 52       	subi	r26, 0x24	; 36
     79c:	bd 4f       	sbci	r27, 0xFD	; 253
     79e:	ae 0f       	add	r26, r30
     7a0:	bf 1f       	adc	r27, r31
     7a2:	2c 93       	st	X, r18
			computer_grid[j][i] = initial_computer_grid[j][i];
     7a4:	a1 e4       	ldi	r26, 0x41	; 65
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	ac 0f       	add	r26, r28
     7aa:	bd 1f       	adc	r27, r29
     7ac:	a8 0f       	add	r26, r24
     7ae:	b9 1f       	adc	r27, r25
     7b0:	ae 0f       	add	r26, r30
     7b2:	bf 1f       	adc	r27, r31
     7b4:	3c 91       	ld	r19, X
     7b6:	84 5e       	subi	r24, 0xE4	; 228
     7b8:	9c 4f       	sbci	r25, 0xFC	; 252
     7ba:	e8 0f       	add	r30, r24
     7bc:	f9 1f       	adc	r31, r25
     7be:	30 83       	st	Z, r19
			if (human_grid[j][i] & SHIP_MASK)
     7c0:	27 70       	andi	r18, 0x07	; 7
     7c2:	29 f0       	breq	.+10     	; 0x7ce <initialise_game+0xa4>
			{
				ledmatrix_draw_pixel_in_human_grid(i, j, COLOUR_ORANGE);
     7c4:	4c e3       	ldi	r20, 0x3C	; 60
     7c6:	61 2f       	mov	r22, r17
     7c8:	80 2f       	mov	r24, r16
     7ca:	0e 94 2e 09 	call	0x125c	; 0x125c <ledmatrix_draw_pixel_in_human_grid>
		 {SEA,                  SEA,                            SEA,                            SEA,                SEA,                SEA,                            SEA,                            SEA                 },
		 {SEA,                  CARRIER|HORIZONTAL|SHIP_END,    CARRIER|HORIZONTAL,             CARRIER|HORIZONTAL, CARRIER|HORIZONTAL, CARRIER|HORIZONTAL,             CARRIER|HORIZONTAL|SHIP_END,    SEA                 },
		 {SEA,                  SEA,                            SEA,                            SEA,                SEA,                SEA,                            SEA,                            SEA                 }};
	for (uint8_t i=0; i<GRID_NUM_COLUMNS; i++)
	{
		for (uint8_t j=0; j<GRID_NUM_COLUMNS; j++)
     7ce:	1f 5f       	subi	r17, 0xFF	; 255
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <initialise_game+0xaa>
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	18 30       	cpi	r17, 0x08	; 8
     7d6:	68 f2       	brcs	.-102    	; 0x772 <initialise_game+0x48>
		 {DESTROYER|SHIP_END,   SEA,                            CORVETTE|SHIP_END,              SEA,                SEA,                SUBMARINE|SHIP_END,             SEA,                            FRIGATE|SHIP_END    },
		 {SEA,                  SEA,                            CORVETTE|SHIP_END,              SEA,                SEA,                SUBMARINE|SHIP_END,             SEA,                            SEA                 },
		 {SEA,                  SEA,                            SEA,                            SEA,                SEA,                SEA,                            SEA,                            SEA                 },
		 {SEA,                  CARRIER|HORIZONTAL|SHIP_END,    CARRIER|HORIZONTAL,             CARRIER|HORIZONTAL, CARRIER|HORIZONTAL, CARRIER|HORIZONTAL,             CARRIER|HORIZONTAL|SHIP_END,    SEA                 },
		 {SEA,                  SEA,                            SEA,                            SEA,                SEA,                SEA,                            SEA,                            SEA                 }};
	for (uint8_t i=0; i<GRID_NUM_COLUMNS; i++)
     7d8:	0f 5f       	subi	r16, 0xFF	; 255
     7da:	08 30       	cpi	r16, 0x08	; 8
     7dc:	d0 f3       	brcs	.-12     	; 0x7d2 <initialise_game+0xa8>
			{
				ledmatrix_draw_pixel_in_human_grid(i, j, COLOUR_ORANGE);
			}
		}
	}
	cursor_x = 3;
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <cursor_x>
	cursor_y = 3;
     7e4:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <cursor_y>
	cursor_on = 1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <cursor_on>
}
     7ee:	c0 58       	subi	r28, 0x80	; 128
     7f0:	df 4f       	sbci	r29, 0xFF	; 255
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <flash_cursor>:

void flash_cursor(void)
{
	
	cursor_on = 1-cursor_on;
     806:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_on>
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	98 1b       	sub	r25, r24
     80e:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <cursor_on>

	if (cursor_on && (computer_grid[7 - cursor_y][cursor_x] & HIT))
     812:	99 23       	and	r25, r25
     814:	e9 f0       	breq	.+58     	; 0x850 <flash_cursor+0x4a>
     816:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <cursor_y>
     81a:	e7 e0       	ldi	r30, 0x07	; 7
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	e6 1b       	sub	r30, r22
     820:	f1 09       	sbc	r31, r1
     822:	67 fd       	sbrc	r22, 7
     824:	f3 95       	inc	r31
     826:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <cursor_x>
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	e4 5e       	subi	r30, 0xE4	; 228
     838:	fc 4f       	sbci	r31, 0xFC	; 252
     83a:	e8 0f       	add	r30, r24
     83c:	f1 1d       	adc	r31, r1
     83e:	87 fd       	sbrc	r24, 7
     840:	fa 95       	dec	r31
     842:	20 81       	ld	r18, Z
     844:	22 23       	and	r18, r18
     846:	24 f4       	brge	.+8      	; 0x850 <flash_cursor+0x4a>
	{
		ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_DARK_YELLOW);
     848:	4a e6       	ldi	r20, 0x6A	; 106
     84a:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
     84e:	08 95       	ret
	}
	else if (cursor_on) 
     850:	99 23       	and	r25, r25
     852:	41 f0       	breq	.+16     	; 0x864 <flash_cursor+0x5e>
	{
		ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_YELLOW);
     854:	4f ef       	ldi	r20, 0xFF	; 255
     856:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <cursor_y>
     85a:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <cursor_x>
     85e:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
     862:	08 95       	ret
	}

	else if ((computer_grid[7 - cursor_y][cursor_x] & HIT) && (computer_grid[7 - cursor_y][cursor_x] & SHIP_MASK)) // test for hit ship here, then duplicate and modify to test for sunken ship
     864:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <cursor_y>
     868:	26 2f       	mov	r18, r22
     86a:	06 2e       	mov	r0, r22
     86c:	00 0c       	add	r0, r0
     86e:	33 0b       	sbc	r19, r19
     870:	e7 e0       	ldi	r30, 0x07	; 7
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	e2 1b       	sub	r30, r18
     876:	f3 0b       	sbc	r31, r19
     878:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <cursor_x>
     87c:	48 2f       	mov	r20, r24
     87e:	08 2e       	mov	r0, r24
     880:	00 0c       	add	r0, r0
     882:	55 0b       	sbc	r21, r21
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	e4 5e       	subi	r30, 0xE4	; 228
     892:	fc 4f       	sbci	r31, 0xFC	; 252
     894:	e4 0f       	add	r30, r20
     896:	f5 1f       	adc	r31, r21
     898:	90 81       	ld	r25, Z
     89a:	99 23       	and	r25, r25
     89c:	3c f4       	brge	.+14     	; 0x8ac <flash_cursor+0xa6>
     89e:	79 2f       	mov	r23, r25
     8a0:	77 70       	andi	r23, 0x07	; 7
     8a2:	21 f0       	breq	.+8      	; 0x8ac <flash_cursor+0xa6>
	{
		ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_RED);
     8a4:	4f e0       	ldi	r20, 0x0F	; 15
     8a6:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
     8aa:	08 95       	ret
	}

	else if ((computer_grid[7 - cursor_y - 7][cursor_x] & HIT) && !(computer_grid[7 - cursor_y][cursor_x] & SHIP_MASK)) {
     8ac:	31 95       	neg	r19
     8ae:	21 95       	neg	r18
     8b0:	31 09       	sbc	r19, r1
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	22 0f       	add	r18, r18
     8b8:	33 1f       	adc	r19, r19
     8ba:	22 0f       	add	r18, r18
     8bc:	33 1f       	adc	r19, r19
     8be:	24 5e       	subi	r18, 0xE4	; 228
     8c0:	3c 4f       	sbci	r19, 0xFC	; 252
     8c2:	f9 01       	movw	r30, r18
     8c4:	e4 0f       	add	r30, r20
     8c6:	f5 1f       	adc	r31, r21
     8c8:	20 81       	ld	r18, Z
     8ca:	22 23       	and	r18, r18
     8cc:	34 f4       	brge	.+12     	; 0x8da <flash_cursor+0xd4>
     8ce:	97 70       	andi	r25, 0x07	; 7
     8d0:	21 f4       	brne	.+8      	; 0x8da <flash_cursor+0xd4>
		ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_GREEN);
     8d2:	40 ef       	ldi	r20, 0xF0	; 240
     8d4:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
     8d8:	08 95       	ret
	}
	else
	{
		ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_BLACK);
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
     8e0:	08 95       	ret

000008e2 <move_cursor>:

// moves the position of the cursor by (dx, dy) such that if the cursor
// started at (cursor_x, cursor_y) then after this function is called,
// it should end at ( (cursor_x + dx) % WIDTH, (cursor_y + dy) % HEIGHT)
// the cursor should be displayed after it is moved as well <- TODO need to flash it
void move_cursor(int8_t dx, int8_t dy) {
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	d8 2f       	mov	r29, r24
     8e8:	c6 2f       	mov	r28, r22
	//update board as cursor moves
	if ((computer_grid[7 - cursor_y][cursor_x] & HIT) && (computer_grid[7 - cursor_y][cursor_x] & SHIP_MASK)) {
     8ea:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <cursor_y>
     8ee:	e7 e0       	ldi	r30, 0x07	; 7
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	e6 1b       	sub	r30, r22
     8f4:	f1 09       	sbc	r31, r1
     8f6:	67 fd       	sbrc	r22, 7
     8f8:	f3 95       	inc	r31
     8fa:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <cursor_x>
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	e4 5e       	subi	r30, 0xE4	; 228
     90c:	fc 4f       	sbci	r31, 0xFC	; 252
     90e:	e8 0f       	add	r30, r24
     910:	f1 1d       	adc	r31, r1
     912:	87 fd       	sbrc	r24, 7
     914:	fa 95       	dec	r31
     916:	90 81       	ld	r25, Z
     918:	29 2f       	mov	r18, r25
     91a:	99 23       	and	r25, r25
     91c:	3c f4       	brge	.+14     	; 0x92c <__stack+0x2d>
     91e:	39 2f       	mov	r19, r25
     920:	37 70       	andi	r19, 0x07	; 7
     922:	21 f0       	breq	.+8      	; 0x92c <__stack+0x2d>
		ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_RED);
     924:	4f e0       	ldi	r20, 0x0F	; 15
     926:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
     92a:	0b c0       	rjmp	.+22     	; 0x942 <__stack+0x43>
	}
	else if ((computer_grid[7 - cursor_y][cursor_x] & HIT) && !(computer_grid[7 - cursor_y][cursor_x] & SHIP_MASK)) {
     92c:	22 23       	and	r18, r18
     92e:	34 f4       	brge	.+12     	; 0x93c <__stack+0x3d>
     930:	97 70       	andi	r25, 0x07	; 7
     932:	21 f4       	brne	.+8      	; 0x93c <__stack+0x3d>
		ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_GREEN);
     934:	40 ef       	ldi	r20, 0xF0	; 240
     936:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
     93a:	03 c0       	rjmp	.+6      	; 0x942 <__stack+0x43>
	}
	else {
	ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_BLACK);
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
	}
	
	//move cursor to new position
	cursor_x += dx;
     942:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <cursor_x>
     946:	8d 0f       	add	r24, r29
     948:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <cursor_x>
	cursor_y += dy;
     94c:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <cursor_y>
     950:	6c 0f       	add	r22, r28
     952:	60 93 db 02 	sts	0x02DB, r22	; 0x8002db <cursor_y>
	if (cursor_x >= 8) {cursor_x = 0;}
     956:	88 30       	cpi	r24, 0x08	; 8
     958:	14 f0       	brlt	.+4      	; 0x95e <__stack+0x5f>
     95a:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <cursor_x>
	if (cursor_x < 0) {cursor_x = 7;}
     95e:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <cursor_x>
     962:	88 23       	and	r24, r24
     964:	1c f4       	brge	.+6      	; 0x96c <__stack+0x6d>
     966:	87 e0       	ldi	r24, 0x07	; 7
     968:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <cursor_x>
	if (cursor_y >= 8) {cursor_y = 0;}
     96c:	68 30       	cpi	r22, 0x08	; 8
     96e:	14 f0       	brlt	.+4      	; 0x974 <__stack+0x75>
     970:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <cursor_y>
	if (cursor_y < 0) {cursor_y = 7;}	
     974:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <cursor_y>
     978:	88 23       	and	r24, r24
     97a:	1c f4       	brge	.+6      	; 0x982 <__stack+0x83>
     97c:	87 e0       	ldi	r24, 0x07	; 7
     97e:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <cursor_y>
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <print_sunken_ship>:

void print_sunken_ship(uint8_t player, uint8_t ship) {
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	e2 97       	sbiw	r28, 0x32	; 50
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61

	//set up ship types and message variable
	char ship_type[20];
	char message[30];

	if ((ship & CARRIER) && !(ship & CRUISER) && !(ship & FRIGATE)) {
     9a0:	96 2f       	mov	r25, r22
     9a2:	91 70       	andi	r25, 0x01	; 1
     9a4:	60 ff       	sbrs	r22, 0
     9a6:	0e c0       	rjmp	.+28     	; 0x9c4 <print_sunken_ship+0x3c>
     9a8:	61 fd       	sbrc	r22, 1
     9aa:	0c c0       	rjmp	.+24     	; 0x9c4 <print_sunken_ship+0x3c>
     9ac:	62 fd       	sbrc	r22, 2
     9ae:	0a c0       	rjmp	.+20     	; 0x9c4 <print_sunken_ship+0x3c>
		strcpy(ship_type, "Carrier");
     9b0:	98 e0       	ldi	r25, 0x08	; 8
     9b2:	ea ee       	ldi	r30, 0xEA	; 234
     9b4:	f1 e0       	ldi	r31, 0x01	; 1
     9b6:	de 01       	movw	r26, r28
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	01 90       	ld	r0, Z+
     9bc:	0d 92       	st	X+, r0
     9be:	9a 95       	dec	r25
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <print_sunken_ship+0x32>
     9c2:	4b c0       	rjmp	.+150    	; 0xa5a <print_sunken_ship+0xd2>
	} else if ((ship & CRUISER) && !(ship & CARRIER) && !(ship & FRIGATE)) {
     9c4:	36 2f       	mov	r19, r22
     9c6:	32 70       	andi	r19, 0x02	; 2
     9c8:	61 ff       	sbrs	r22, 1
     9ca:	0e c0       	rjmp	.+28     	; 0x9e8 <print_sunken_ship+0x60>
     9cc:	91 11       	cpse	r25, r1
     9ce:	0c c0       	rjmp	.+24     	; 0x9e8 <print_sunken_ship+0x60>
     9d0:	62 fd       	sbrc	r22, 2
     9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <print_sunken_ship+0x60>
		strcpy(ship_type, "Cruiser");
     9d4:	98 e0       	ldi	r25, 0x08	; 8
     9d6:	e2 ef       	ldi	r30, 0xF2	; 242
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
     9da:	de 01       	movw	r26, r28
     9dc:	11 96       	adiw	r26, 0x01	; 1
     9de:	01 90       	ld	r0, Z+
     9e0:	0d 92       	st	X+, r0
     9e2:	9a 95       	dec	r25
     9e4:	e1 f7       	brne	.-8      	; 0x9de <print_sunken_ship+0x56>
     9e6:	39 c0       	rjmp	.+114    	; 0xa5a <print_sunken_ship+0xd2>
	} else if ((ship & DESTROYER) && !(ship & FRIGATE)) {
     9e8:	26 2f       	mov	r18, r22
     9ea:	23 70       	andi	r18, 0x03	; 3
     9ec:	61 f0       	breq	.+24     	; 0xa06 <print_sunken_ship+0x7e>
     9ee:	62 fd       	sbrc	r22, 2
     9f0:	0a c0       	rjmp	.+20     	; 0xa06 <print_sunken_ship+0x7e>
		strcpy(ship_type, "Destroyer");		
     9f2:	9a e0       	ldi	r25, 0x0A	; 10
     9f4:	ea ef       	ldi	r30, 0xFA	; 250
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	de 01       	movw	r26, r28
     9fa:	11 96       	adiw	r26, 0x01	; 1
     9fc:	01 90       	ld	r0, Z+
     9fe:	0d 92       	st	X+, r0
     a00:	9a 95       	dec	r25
     a02:	e1 f7       	brne	.-8      	; 0x9fc <print_sunken_ship+0x74>
     a04:	2a c0       	rjmp	.+84     	; 0xa5a <print_sunken_ship+0xd2>
	} else if ((ship & FRIGATE) && !(ship & CARRIER) && !(ship & CRUISER)) {
     a06:	62 ff       	sbrs	r22, 2
     a08:	0e c0       	rjmp	.+28     	; 0xa26 <print_sunken_ship+0x9e>
     a0a:	91 11       	cpse	r25, r1
     a0c:	0c c0       	rjmp	.+24     	; 0xa26 <print_sunken_ship+0x9e>
     a0e:	31 11       	cpse	r19, r1
     a10:	0a c0       	rjmp	.+20     	; 0xa26 <print_sunken_ship+0x9e>
		strcpy(ship_type, "Frigate");
     a12:	98 e0       	ldi	r25, 0x08	; 8
     a14:	e4 e0       	ldi	r30, 0x04	; 4
     a16:	f2 e0       	ldi	r31, 0x02	; 2
     a18:	de 01       	movw	r26, r28
     a1a:	11 96       	adiw	r26, 0x01	; 1
     a1c:	01 90       	ld	r0, Z+
     a1e:	0d 92       	st	X+, r0
     a20:	9a 95       	dec	r25
     a22:	e1 f7       	brne	.-8      	; 0xa1c <print_sunken_ship+0x94>
     a24:	1a c0       	rjmp	.+52     	; 0xa5a <print_sunken_ship+0xd2>
	} else if ((ship & CORVETTE) && !(ship & CRUISER)) {
     a26:	96 2f       	mov	r25, r22
     a28:	95 70       	andi	r25, 0x05	; 5
     a2a:	61 f0       	breq	.+24     	; 0xa44 <print_sunken_ship+0xbc>
     a2c:	31 11       	cpse	r19, r1
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <print_sunken_ship+0xbc>
		strcpy(ship_type, "Corvette");
     a30:	99 e0       	ldi	r25, 0x09	; 9
     a32:	ec e0       	ldi	r30, 0x0C	; 12
     a34:	f2 e0       	ldi	r31, 0x02	; 2
     a36:	de 01       	movw	r26, r28
     a38:	11 96       	adiw	r26, 0x01	; 1
     a3a:	01 90       	ld	r0, Z+
     a3c:	0d 92       	st	X+, r0
     a3e:	9a 95       	dec	r25
     a40:	e1 f7       	brne	.-8      	; 0xa3a <print_sunken_ship+0xb2>
     a42:	0b c0       	rjmp	.+22     	; 0xa5a <print_sunken_ship+0xd2>
	} else if (ship & SUBMARINE) {
     a44:	66 70       	andi	r22, 0x06	; 6
     a46:	49 f0       	breq	.+18     	; 0xa5a <print_sunken_ship+0xd2>
		strcpy(ship_type, "Submarine");
     a48:	9a e0       	ldi	r25, 0x0A	; 10
     a4a:	e5 e1       	ldi	r30, 0x15	; 21
     a4c:	f2 e0       	ldi	r31, 0x02	; 2
     a4e:	de 01       	movw	r26, r28
     a50:	11 96       	adiw	r26, 0x01	; 1
     a52:	01 90       	ld	r0, Z+
     a54:	0d 92       	st	X+, r0
     a56:	9a 95       	dec	r25
     a58:	e1 f7       	brne	.-8      	; 0xa52 <print_sunken_ship+0xca>
	
	
		
	//print to the terminal after a ship has been sunk
	//TODO need if statements for length
	if (player == 1) {
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	71 f5       	brne	.+92     	; 0xaba <print_sunken_ship+0x132>
		//move_terminal_cursor(60 - strlen(human), humanConsolePrinter);
		//printf(human);
		//humanConsolePrinter++;
		sprintf(message, "You Sunk My %s", ship_type);
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	9f 93       	push	r25
     a64:	8f 93       	push	r24
     a66:	8f e1       	ldi	r24, 0x1F	; 31
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	9f 93       	push	r25
     a6c:	8f 93       	push	r24
     a6e:	8e 01       	movw	r16, r28
     a70:	0b 5e       	subi	r16, 0xEB	; 235
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	1f 93       	push	r17
     a76:	0f 93       	push	r16
     a78:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <sprintf>
		move_terminal_cursor(80 - strlen(message), humanConsolePrinter);
     a7c:	f8 01       	movw	r30, r16
     a7e:	01 90       	ld	r0, Z+
     a80:	00 20       	and	r0, r0
     a82:	e9 f7       	brne	.-6      	; 0xa7e <print_sunken_ship+0xf6>
     a84:	31 97       	sbiw	r30, 0x01	; 1
     a86:	e0 1b       	sub	r30, r16
     a88:	f1 0b       	sbc	r31, r17
     a8a:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <humanConsolePrinter>
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	80 e5       	ldi	r24, 0x50	; 80
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	8e 1b       	sub	r24, r30
     a96:	9f 0b       	sbc	r25, r31
     a98:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
		printf("%s\n", message);
     a9c:	c8 01       	movw	r24, r16
     a9e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <puts>
		humanConsolePrinter++; // Assuming this is a variable managed elsewhere to track output position
     aa2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <humanConsolePrinter>
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <humanConsolePrinter>
		return;
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	24 c0       	rjmp	.+72     	; 0xb02 <print_sunken_ship+0x17a>
		} else {
		//move_terminal_cursor(20, computerConsolePrinter);
		//printf(computer);
		sprintf(message, "I Sunk Your %s", ship_type);
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	8e e2       	ldi	r24, 0x2E	; 46
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	9f 93       	push	r25
     ac8:	8f 93       	push	r24
     aca:	8e 01       	movw	r16, r28
     acc:	0b 5e       	subi	r16, 0xEB	; 235
     ace:	1f 4f       	sbci	r17, 0xFF	; 255
     ad0:	1f 93       	push	r17
     ad2:	0f 93       	push	r16
     ad4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <sprintf>
		move_terminal_cursor(20, computerConsolePrinter);
     ad8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	84 e1       	ldi	r24, 0x14	; 20
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
		printf("%s\n", message);
     ae6:	c8 01       	movw	r24, r16
     ae8:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <puts>
		computerConsolePrinter++;
     aec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return;
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
	}
	
}
     b02:	e2 96       	adiw	r28, 0x32	; 50
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <sink_ship>:


//sink a ship, starting at x and y, progressing along the length in the direction of travel
void sink_ship(uint8_t player, int8_t col, int8_t row, char direction, uint8_t grid[8][8]) {
     b18:	9f 92       	push	r9
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	f6 2e       	mov	r15, r22
     b30:	d4 2f       	mov	r29, r20
     b32:	e2 2e       	mov	r14, r18
	
	uint8_t miss = 0;
	int8_t length = 0;
	
	
	if (direction == 'w') {
     b34:	27 e7       	ldi	r18, 0x77	; 119
     b36:	e2 12       	cpse	r14, r18
     b38:	20 c0       	rjmp	.+64     	; 0xb7a <sink_ship+0x62>
     b3a:	1a c0       	rjmp	.+52     	; 0xb70 <sink_ship+0x58>
		for (row; row >= 0; row--) {
			if ((grid[row][col] & SHIP_MASK) && !(grid[row][col] & HIT)) {
     b3c:	f8 01       	movw	r30, r16
     b3e:	28 e0       	ldi	r18, 0x08	; 8
     b40:	d2 02       	muls	r29, r18
     b42:	e0 0d       	add	r30, r0
     b44:	f1 1d       	adc	r31, r1
     b46:	11 24       	eor	r1, r1
     b48:	ef 0d       	add	r30, r15
     b4a:	f1 1d       	adc	r31, r1
     b4c:	f7 fc       	sbrc	r15, 7
     b4e:	fa 95       	dec	r31
     b50:	20 81       	ld	r18, Z
     b52:	32 2f       	mov	r19, r18
     b54:	37 70       	andi	r19, 0x07	; 7
     b56:	21 f0       	breq	.+8      	; 0xb60 <sink_ship+0x48>
     b58:	22 23       	and	r18, r18
     b5a:	14 f0       	brlt	.+4      	; 0xb60 <sink_ship+0x48>
				miss++;
     b5c:	9f 5f       	subi	r25, 0xFF	; 255
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <sink_ship+0x52>
			} else if ((grid[row][col] & ~HIT) == SEA) {
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	2f 77       	andi	r18, 0x7F	; 127
     b64:	23 2b       	or	r18, r19
     b66:	09 f4       	brne	.+2      	; 0xb6a <sink_ship+0x52>
     b68:	71 c0       	rjmp	.+226    	; 0xc4c <sink_ship+0x134>
				break;
			}
			length++;
     b6a:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t miss = 0;
	int8_t length = 0;
	
	
	if (direction == 'w') {
		for (row; row >= 0; row--) {
     b6c:	d1 50       	subi	r29, 0x01	; 1
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <sink_ship+0x5c>
     b70:	c0 e0       	ldi	r28, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	dd 23       	and	r29, r29
     b76:	14 f7       	brge	.-60     	; 0xb3c <sink_ship+0x24>
     b78:	69 c0       	rjmp	.+210    	; 0xc4c <sink_ship+0x134>
				break;
			}
			length++;
		}
		
	} else if (direction == 's') {
     b7a:	93 e7       	ldi	r25, 0x73	; 115
     b7c:	e9 12       	cpse	r14, r25
     b7e:	20 c0       	rjmp	.+64     	; 0xbc0 <sink_ship+0xa8>
     b80:	1a c0       	rjmp	.+52     	; 0xbb6 <sink_ship+0x9e>
		for (row; row < 8; row++) {
			if ((grid[row][col] & SHIP_MASK) && !(grid[row][col] & HIT)) {
     b82:	f8 01       	movw	r30, r16
     b84:	28 e0       	ldi	r18, 0x08	; 8
     b86:	d2 02       	muls	r29, r18
     b88:	e0 0d       	add	r30, r0
     b8a:	f1 1d       	adc	r31, r1
     b8c:	11 24       	eor	r1, r1
     b8e:	ef 0d       	add	r30, r15
     b90:	f1 1d       	adc	r31, r1
     b92:	f7 fc       	sbrc	r15, 7
     b94:	fa 95       	dec	r31
     b96:	20 81       	ld	r18, Z
     b98:	32 2f       	mov	r19, r18
     b9a:	37 70       	andi	r19, 0x07	; 7
     b9c:	21 f0       	breq	.+8      	; 0xba6 <sink_ship+0x8e>
     b9e:	22 23       	and	r18, r18
     ba0:	14 f0       	brlt	.+4      	; 0xba6 <sink_ship+0x8e>
				miss++;
     ba2:	9f 5f       	subi	r25, 0xFF	; 255
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <sink_ship+0x98>
			} else if ((grid[row][col] & ~HIT) == SEA) {
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	2f 77       	andi	r18, 0x7F	; 127
     baa:	23 2b       	or	r18, r19
     bac:	09 f4       	brne	.+2      	; 0xbb0 <sink_ship+0x98>
     bae:	4e c0       	rjmp	.+156    	; 0xc4c <sink_ship+0x134>
				break;
			}
			length++;
     bb0:	cf 5f       	subi	r28, 0xFF	; 255
			}
			length++;
		}
		
	} else if (direction == 's') {
		for (row; row < 8; row++) {
     bb2:	df 5f       	subi	r29, 0xFF	; 255
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <sink_ship+0xa2>
     bb6:	c0 e0       	ldi	r28, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	d8 30       	cpi	r29, 0x08	; 8
     bbc:	14 f3       	brlt	.-60     	; 0xb82 <sink_ship+0x6a>
     bbe:	46 c0       	rjmp	.+140    	; 0xc4c <sink_ship+0x134>
				break;
			}
			length++;
		}
		
	} else if (direction == 'a') {
     bc0:	91 e6       	ldi	r25, 0x61	; 97
     bc2:	e9 12       	cpse	r14, r25
     bc4:	1f c0       	rjmp	.+62     	; 0xc04 <sink_ship+0xec>
     bc6:	19 c0       	rjmp	.+50     	; 0xbfa <sink_ship+0xe2>
		for (col; col > 0; col--) {
			if ((grid[row][col] & SHIP_MASK) && !(grid[row][col] & HIT)) {
     bc8:	f8 01       	movw	r30, r16
     bca:	28 e0       	ldi	r18, 0x08	; 8
     bcc:	d2 02       	muls	r29, r18
     bce:	e0 0d       	add	r30, r0
     bd0:	f1 1d       	adc	r31, r1
     bd2:	11 24       	eor	r1, r1
     bd4:	ef 0d       	add	r30, r15
     bd6:	f1 1d       	adc	r31, r1
     bd8:	f7 fc       	sbrc	r15, 7
     bda:	fa 95       	dec	r31
     bdc:	20 81       	ld	r18, Z
     bde:	32 2f       	mov	r19, r18
     be0:	37 70       	andi	r19, 0x07	; 7
     be2:	21 f0       	breq	.+8      	; 0xbec <sink_ship+0xd4>
     be4:	22 23       	and	r18, r18
     be6:	14 f0       	brlt	.+4      	; 0xbec <sink_ship+0xd4>
				miss++;
     be8:	9f 5f       	subi	r25, 0xFF	; 255
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <sink_ship+0xdc>
			} else if ((grid[row][col] & ~HIT) == SEA) {
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	2f 77       	andi	r18, 0x7F	; 127
     bf0:	23 2b       	or	r18, r19
     bf2:	61 f1       	breq	.+88     	; 0xc4c <sink_ship+0x134>
			break;
			}
			length++;
     bf4:	cf 5f       	subi	r28, 0xFF	; 255
			}
			length++;
		}
		
	} else if (direction == 'a') {
		for (col; col > 0; col--) {
     bf6:	fa 94       	dec	r15
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <sink_ship+0xe6>
     bfa:	c0 e0       	ldi	r28, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	1f 14       	cp	r1, r15
     c00:	1c f3       	brlt	.-58     	; 0xbc8 <sink_ship+0xb0>
     c02:	24 c0       	rjmp	.+72     	; 0xc4c <sink_ship+0x134>
			break;
			}
			length++;
		}
		
	} else if (direction == 'd') {
     c04:	94 e6       	ldi	r25, 0x64	; 100
     c06:	e9 16       	cp	r14, r25
     c08:	e1 f0       	breq	.+56     	; 0xc42 <sink_ship+0x12a>
	//move_terminal_cursor(50, count);
	//count++;
	//printf("%c\n", direction);
	
	uint8_t miss = 0;
	int8_t length = 0;
     c0a:	c0 e0       	ldi	r28, 0x00	; 0
	//DELETE debug
	//move_terminal_cursor(50, count);
	//count++;
	//printf("%c\n", direction);
	
	uint8_t miss = 0;
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	1e c0       	rjmp	.+60     	; 0xc4c <sink_ship+0x134>
			length++;
		}
		
	} else if (direction == 'd') {
		for (col; col < 8; col++) {
			if ((grid[row][col] & SHIP_MASK) && !(grid[row][col] & HIT)) {
     c10:	f8 01       	movw	r30, r16
     c12:	28 e0       	ldi	r18, 0x08	; 8
     c14:	d2 02       	muls	r29, r18
     c16:	e0 0d       	add	r30, r0
     c18:	f1 1d       	adc	r31, r1
     c1a:	11 24       	eor	r1, r1
     c1c:	ef 0d       	add	r30, r15
     c1e:	f1 1d       	adc	r31, r1
     c20:	f7 fc       	sbrc	r15, 7
     c22:	fa 95       	dec	r31
     c24:	20 81       	ld	r18, Z
     c26:	32 2f       	mov	r19, r18
     c28:	37 70       	andi	r19, 0x07	; 7
     c2a:	21 f0       	breq	.+8      	; 0xc34 <sink_ship+0x11c>
     c2c:	22 23       	and	r18, r18
     c2e:	14 f0       	brlt	.+4      	; 0xc34 <sink_ship+0x11c>
				miss++;
     c30:	9f 5f       	subi	r25, 0xFF	; 255
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <sink_ship+0x124>
			} else if ((grid[row][col] & ~HIT) == SEA) {
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	2f 77       	andi	r18, 0x7F	; 127
     c38:	23 2b       	or	r18, r19
     c3a:	41 f0       	breq	.+16     	; 0xc4c <sink_ship+0x134>
			break;
			}
			length++;
     c3c:	cf 5f       	subi	r28, 0xFF	; 255
			}
			length++;
		}
		
	} else if (direction == 'd') {
		for (col; col < 8; col++) {
     c3e:	f3 94       	inc	r15
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <sink_ship+0x12e>
     c42:	c0 e0       	ldi	r28, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	27 e0       	ldi	r18, 0x07	; 7
     c48:	2f 15       	cp	r18, r15
     c4a:	14 f7       	brge	.-60     	; 0xc10 <sink_ship+0xf8>
		}
	}
	
	
	//use length and direction, start coord, and player to mark appropriate ship as sunk
	if (miss == 0) {
     c4c:	91 11       	cpse	r25, r1
     c4e:	13 c1       	rjmp	.+550    	; 0xe76 <sink_ship+0x35e>

	uint8_t original_length = length;
     c50:	9c 2e       	mov	r9, r28
				
		// TODO add a while loop which incrementally lower the length integer and puts a SUNK bit into each value based on direction	
		// be careful of behaviour from notes TODO, need to adjust row and col values
		// have an if statement at the end of each nested loop inside while loop that returns to print ships when the count gets to 0
	
		if (direction == 'w') {
     c52:	97 e7       	ldi	r25, 0x77	; 119
     c54:	e9 12       	cpse	r14, r25
     c56:	2d c0       	rjmp	.+90     	; 0xcb2 <sink_ship+0x19a>
			//solving weird problem with row and length values
			row++;
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	2d 0f       	add	r18, r29
			length--;
     c5c:	c1 50       	subi	r28, 0x01	; 1
			while (length >= 0) {			
     c5e:	26 c0       	rjmp	.+76     	; 0xcac <sink_ship+0x194>
				//move_terminal_cursor(30, count);
				//count++;
				//printf("Sinking ship at (Column %d, Row %d), length %d direction %c.\n \n", col, row, length, direction);	
				
				//sink the ship part
				grid[row][col] |= SUNK;
     c60:	f8 01       	movw	r30, r16
     c62:	98 e0       	ldi	r25, 0x08	; 8
     c64:	29 02       	muls	r18, r25
     c66:	e0 0d       	add	r30, r0
     c68:	f1 1d       	adc	r31, r1
     c6a:	11 24       	eor	r1, r1
     c6c:	4f 2d       	mov	r20, r15
     c6e:	0f 2c       	mov	r0, r15
     c70:	00 0c       	add	r0, r0
     c72:	55 0b       	sbc	r21, r21
     c74:	e4 0f       	add	r30, r20
     c76:	f5 1f       	adc	r31, r21
     c78:	90 81       	ld	r25, Z
     c7a:	90 64       	ori	r25, 0x40	; 64
     c7c:	90 83       	st	Z, r25
				row++;
     c7e:	2f 5f       	subi	r18, 0xFF	; 255
				length--;
     c80:	c1 50       	subi	r28, 0x01	; 1
				if (length < 0) {
     c82:	a2 f4       	brpl	.+40     	; 0xcac <sink_ship+0x194>
					//this will be sent to print_ship
					//move_terminal_cursor(30, count);
					//count++;
					//printf("Finished sinking ship of original length %d", original_length);		
					return print_sunken_ship(player, grid[row-1][col]);			
     c84:	02 2e       	mov	r0, r18
     c86:	00 0c       	add	r0, r0
     c88:	33 0b       	sbc	r19, r19
     c8a:	21 50       	subi	r18, 0x01	; 1
     c8c:	30 4e       	sbci	r19, 0xE0	; 224
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	02 0f       	add	r16, r18
     c9c:	13 1f       	adc	r17, r19
     c9e:	f8 01       	movw	r30, r16
     ca0:	e4 0f       	add	r30, r20
     ca2:	f5 1f       	adc	r31, r21
     ca4:	60 81       	ld	r22, Z
     ca6:	0e 94 c4 04 	call	0x988	; 0x988 <print_sunken_ship>
     caa:	e5 c0       	rjmp	.+458    	; 0xe76 <sink_ship+0x35e>
	
		if (direction == 'w') {
			//solving weird problem with row and length values
			row++;
			length--;
			while (length >= 0) {			
     cac:	cc 23       	and	r28, r28
     cae:	c4 f6       	brge	.-80     	; 0xc60 <sink_ship+0x148>
     cb0:	e2 c0       	rjmp	.+452    	; 0xe76 <sink_ship+0x35e>
					//printf("Finished sinking ship of original length %d", original_length);		
					return print_sunken_ship(player, grid[row-1][col]);			
				}
			}
					
		} else if (direction == 's') {
     cb2:	23 e7       	ldi	r18, 0x73	; 115
     cb4:	e2 12       	cpse	r14, r18
     cb6:	5d c0       	rjmp	.+186    	; 0xd72 <sink_ship+0x25a>
     cb8:	58 c0       	rjmp	.+176    	; 0xd6a <sink_ship+0x252>
			while (length >= 0) {
				//move print cursor -> DELETE debugging
				move_terminal_cursor(30, count);
     cba:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <count>
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	8e e1       	ldi	r24, 0x1E	; 30
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
				count++;
     cc8:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <count>
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <count>
				printf("Sinking ship at (Column %d, Row %d), length %d direction %c.\n \n", col, row, length, direction);
     cd2:	1f 92       	push	r1
     cd4:	ef 92       	push	r14
     cd6:	8c 2f       	mov	r24, r28
     cd8:	0c 2e       	mov	r0, r28
     cda:	00 0c       	add	r0, r0
     cdc:	99 0b       	sbc	r25, r25
     cde:	9f 93       	push	r25
     ce0:	cf 93       	push	r28
     ce2:	ad 2e       	mov	r10, r29
     ce4:	0d 2e       	mov	r0, r29
     ce6:	00 0c       	add	r0, r0
     ce8:	bb 08       	sbc	r11, r11
     cea:	bf 92       	push	r11
     cec:	df 93       	push	r29
     cee:	cf 2c       	mov	r12, r15
     cf0:	0f 2c       	mov	r0, r15
     cf2:	00 0c       	add	r0, r0
     cf4:	dd 08       	sbc	r13, r13
     cf6:	df 92       	push	r13
     cf8:	ff 92       	push	r15
     cfa:	8d e3       	ldi	r24, 0x3D	; 61
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <printf>
				
				//sink the ship part
				grid[row][col] |= SUNK;
     d06:	aa 0c       	add	r10, r10
     d08:	bb 1c       	adc	r11, r11
     d0a:	aa 0c       	add	r10, r10
     d0c:	bb 1c       	adc	r11, r11
     d0e:	aa 0c       	add	r10, r10
     d10:	bb 1c       	adc	r11, r11
     d12:	a0 0e       	add	r10, r16
     d14:	b1 1e       	adc	r11, r17
     d16:	f5 01       	movw	r30, r10
     d18:	ec 0d       	add	r30, r12
     d1a:	fd 1d       	adc	r31, r13
     d1c:	80 81       	ld	r24, Z
     d1e:	80 64       	ori	r24, 0x40	; 64
     d20:	80 83       	st	Z, r24
				row--;
     d22:	d1 50       	subi	r29, 0x01	; 1
				length--;
     d24:	c1 50       	subi	r28, 0x01	; 1
				if (length < 0) {
     d26:	8d b7       	in	r24, 0x3d	; 61
     d28:	9e b7       	in	r25, 0x3e	; 62
     d2a:	0a 96       	adiw	r24, 0x0a	; 10
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	9e bf       	out	0x3e, r25	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	8d bf       	out	0x3d, r24	; 61
     d36:	cc 23       	and	r28, r28
     d38:	c4 f4       	brge	.+48     	; 0xd6a <sink_ship+0x252>
					//this will be sent to print_ship
					move_terminal_cursor(30, count);
     d3a:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <count>
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	8e e1       	ldi	r24, 0x1E	; 30
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
					count++;
     d48:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <count>
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <count>
					printf("Finished sinking ship of original length %d", original_length);
     d52:	1f 92       	push	r1
     d54:	9f 92       	push	r9
     d56:	8d e7       	ldi	r24, 0x7D	; 125
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <printf>
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
					return print_sunken_ship(player, grid[row-1][col]);			
				}
			}
					
		} else if (direction == 's') {
			while (length >= 0) {
     d6a:	cc 23       	and	r28, r28
     d6c:	0c f0       	brlt	.+2      	; 0xd70 <sink_ship+0x258>
     d6e:	a5 cf       	rjmp	.-182    	; 0xcba <sink_ship+0x1a2>
     d70:	82 c0       	rjmp	.+260    	; 0xe76 <sink_ship+0x35e>
					count++;
					printf("Finished sinking ship of original length %d", original_length);
				}
			}
					
		} else if (direction == 'a') {
     d72:	91 e6       	ldi	r25, 0x61	; 97
     d74:	e9 12       	cpse	r14, r25
     d76:	5d c0       	rjmp	.+186    	; 0xe32 <sink_ship+0x31a>
     d78:	58 c0       	rjmp	.+176    	; 0xe2a <sink_ship+0x312>
			while (length >= 0) {
				//move print cursor -> DELETE debugging
				move_terminal_cursor(30, count);
     d7a:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <count>
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	8e e1       	ldi	r24, 0x1E	; 30
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
				count++;
     d88:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <count>
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <count>
				printf("Sinking ship at (Column %d, Row %d), length %d direction %c.\n \n", col, row, length, direction);
     d92:	af 2c       	mov	r10, r15
     d94:	0f 2c       	mov	r0, r15
     d96:	00 0c       	add	r0, r0
     d98:	bb 08       	sbc	r11, r11
     d9a:	1f 92       	push	r1
     d9c:	ef 92       	push	r14
     d9e:	8c 2f       	mov	r24, r28
     da0:	0c 2e       	mov	r0, r28
     da2:	00 0c       	add	r0, r0
     da4:	99 0b       	sbc	r25, r25
     da6:	9f 93       	push	r25
     da8:	cf 93       	push	r28
     daa:	cd 2e       	mov	r12, r29
     dac:	0d 2e       	mov	r0, r29
     dae:	00 0c       	add	r0, r0
     db0:	dd 08       	sbc	r13, r13
     db2:	df 92       	push	r13
     db4:	df 93       	push	r29
     db6:	bf 92       	push	r11
     db8:	ff 92       	push	r15
     dba:	8d e3       	ldi	r24, 0x3D	; 61
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <printf>
				
				//sink the ship part
				grid[row][col] |= SUNK;
     dc6:	cc 0c       	add	r12, r12
     dc8:	dd 1c       	adc	r13, r13
     dca:	cc 0c       	add	r12, r12
     dcc:	dd 1c       	adc	r13, r13
     dce:	cc 0c       	add	r12, r12
     dd0:	dd 1c       	adc	r13, r13
     dd2:	c0 0e       	add	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	f6 01       	movw	r30, r12
     dd8:	ea 0d       	add	r30, r10
     dda:	fb 1d       	adc	r31, r11
     ddc:	80 81       	ld	r24, Z
     dde:	80 64       	ori	r24, 0x40	; 64
     de0:	80 83       	st	Z, r24
				col++;
     de2:	f3 94       	inc	r15
				length--;
     de4:	c1 50       	subi	r28, 0x01	; 1
				if (length < 0) {
     de6:	8d b7       	in	r24, 0x3d	; 61
     de8:	9e b7       	in	r25, 0x3e	; 62
     dea:	0a 96       	adiw	r24, 0x0a	; 10
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	9e bf       	out	0x3e, r25	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	8d bf       	out	0x3d, r24	; 61
     df6:	cc 23       	and	r28, r28
     df8:	c4 f4       	brge	.+48     	; 0xe2a <sink_ship+0x312>
					//this will be sent to print_ship
					move_terminal_cursor(30, count);
     dfa:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <count>
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	8e e1       	ldi	r24, 0x1E	; 30
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
					count++;
     e08:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <count>
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <count>
					printf("Finished sinking ship of original length %d", original_length);
     e12:	1f 92       	push	r1
     e14:	9f 92       	push	r9
     e16:	8d e7       	ldi	r24, 0x7D	; 125
     e18:	92 e0       	ldi	r25, 0x02	; 2
     e1a:	9f 93       	push	r25
     e1c:	8f 93       	push	r24
     e1e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <printf>
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
					printf("Finished sinking ship of original length %d", original_length);
				}
			}
					
		} else if (direction == 'a') {
			while (length >= 0) {
     e2a:	cc 23       	and	r28, r28
     e2c:	0c f0       	brlt	.+2      	; 0xe30 <sink_ship+0x318>
     e2e:	a5 cf       	rjmp	.-182    	; 0xd7a <sink_ship+0x262>
     e30:	22 c0       	rjmp	.+68     	; 0xe76 <sink_ship+0x35e>
					count++;
					printf("Finished sinking ship of original length %d", original_length);
				}
			}
					
		} else if (direction == 'd') {
     e32:	94 e6       	ldi	r25, 0x64	; 100
     e34:	e9 12       	cpse	r14, r25
     e36:	1f c0       	rjmp	.+62     	; 0xe76 <sink_ship+0x35e>
     e38:	1c c0       	rjmp	.+56     	; 0xe72 <sink_ship+0x35a>
				//move_terminal_cursor(30, count);
				//count++;
				//printf("Sinking ship at (Column %d, Row %d), length %d direction %c.\n \n", col, row, length, direction);
				
				//sink the ship part
				grid[row][col] |= SUNK;
     e3a:	f8 01       	movw	r30, r16
     e3c:	28 e0       	ldi	r18, 0x08	; 8
     e3e:	d2 02       	muls	r29, r18
     e40:	e0 0d       	add	r30, r0
     e42:	f1 1d       	adc	r31, r1
     e44:	11 24       	eor	r1, r1
     e46:	df 01       	movw	r26, r30
     e48:	af 0d       	add	r26, r15
     e4a:	b1 1d       	adc	r27, r1
     e4c:	f7 fc       	sbrc	r15, 7
     e4e:	ba 95       	dec	r27
     e50:	9c 91       	ld	r25, X
     e52:	90 64       	ori	r25, 0x40	; 64
     e54:	9c 93       	st	X, r25
				col--;
     e56:	fa 94       	dec	r15
				length--;
     e58:	c1 50       	subi	r28, 0x01	; 1
				if (length < 0) {
     e5a:	5a f4       	brpl	.+22     	; 0xe72 <sink_ship+0x35a>
					//this will be sent to print_ship
					//move_terminal_cursor(30, count);
					//count++;
					//printf("Finished sinking ship of original length %d", original_length);
					return print_sunken_ship(player, grid[row][col+1]);	
     e5c:	2f 2d       	mov	r18, r15
     e5e:	ff 0c       	add	r15, r15
     e60:	33 0b       	sbc	r19, r19
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	e2 0f       	add	r30, r18
     e68:	f3 1f       	adc	r31, r19
     e6a:	60 81       	ld	r22, Z
     e6c:	0e 94 c4 04 	call	0x988	; 0x988 <print_sunken_ship>
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <sink_ship+0x35e>
				}
			}
					
		} else if (direction == 'd') {

			while (length >= 0) {
     e72:	cc 23       	and	r28, r28
     e74:	14 f7       	brge	.-60     	; 0xe3a <sink_ship+0x322>
					return print_sunken_ship(player, grid[row][col+1]);	
				}
			}
		}			
	}
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	bf 90       	pop	r11
     e88:	af 90       	pop	r10
     e8a:	9f 90       	pop	r9
     e8c:	08 95       	ret

00000e8e <check_for_sunken_ships>:

//check entire board for any ships that have been hit and not sunk, send coordinates and direction to sink_ship
void check_for_sunken_ships(uint8_t player, uint8_t grid[8][8]) {
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	d8 2e       	mov	r13, r24
     e9e:	7b 01       	movw	r14, r22
		
	//loop through the board
	for (int8_t row = 7; row >= 0; row--) {
     ea0:	d7 e0       	ldi	r29, 0x07	; 7
     ea2:	64 c0       	rjmp	.+200    	; 0xf6c <check_for_sunken_ships+0xde>
		for (int8_t col = 0; col < 8; col++) {
				
			//find the end of a ship
			if ((grid[row][col] & SHIP_END) && !(grid[row][col] & SUNK)) {
     ea4:	4d 2f       	mov	r20, r29
     ea6:	0d 2e       	mov	r0, r29
     ea8:	00 0c       	add	r0, r0
     eaa:	55 0b       	sbc	r21, r21
     eac:	ca 01       	movw	r24, r20
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	8e 0d       	add	r24, r14
     ebc:	9f 1d       	adc	r25, r15
     ebe:	2c 2f       	mov	r18, r28
     ec0:	0c 2e       	mov	r0, r28
     ec2:	00 0c       	add	r0, r0
     ec4:	33 0b       	sbc	r19, r19
     ec6:	fc 01       	movw	r30, r24
     ec8:	e2 0f       	add	r30, r18
     eca:	f3 1f       	adc	r31, r19
     ecc:	60 81       	ld	r22, Z
     ece:	63 ff       	sbrs	r22, 3
     ed0:	46 c0       	rjmp	.+140    	; 0xf5e <check_for_sunken_ships+0xd0>
     ed2:	66 fd       	sbrc	r22, 6
     ed4:	44 c0       	rjmp	.+136    	; 0xf5e <check_for_sunken_ships+0xd0>
					
				//if ship is horizontal and sea or out of bounds to the left, go right, else go left
				if (grid[row][col] & HORIZONTAL) {
     ed6:	64 ff       	sbrs	r22, 4
     ed8:	1b c0       	rjmp	.+54     	; 0xf10 <check_for_sunken_ships+0x82>
					if ((col-1 < 0) || ((grid[row][col - 1] & ~HIT) == SEA)) {			
     eda:	21 50       	subi	r18, 0x01	; 1
     edc:	31 09       	sbc	r19, r1
     ede:	42 f0       	brmi	.+16     	; 0xef0 <check_for_sunken_ships+0x62>
     ee0:	fc 01       	movw	r30, r24
     ee2:	e2 0f       	add	r30, r18
     ee4:	f3 1f       	adc	r31, r19
     ee6:	80 81       	ld	r24, Z
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	8f 77       	andi	r24, 0x7F	; 127
     eec:	89 2b       	or	r24, r25
     eee:	41 f4       	brne	.+16     	; 0xf00 <check_for_sunken_ships+0x72>
						sink_ship(player, col, row, 'd', grid);
     ef0:	87 01       	movw	r16, r14
     ef2:	24 e6       	ldi	r18, 0x64	; 100
     ef4:	4d 2f       	mov	r20, r29
     ef6:	6c 2f       	mov	r22, r28
     ef8:	8d 2d       	mov	r24, r13
     efa:	0e 94 8c 05 	call	0xb18	; 0xb18 <sink_ship>
     efe:	2f c0       	rjmp	.+94     	; 0xf5e <check_for_sunken_ships+0xd0>

					} else {				
						sink_ship(player, col, row, 'a', grid);			
     f00:	87 01       	movw	r16, r14
     f02:	21 e6       	ldi	r18, 0x61	; 97
     f04:	4d 2f       	mov	r20, r29
     f06:	6c 2f       	mov	r22, r28
     f08:	8d 2d       	mov	r24, r13
     f0a:	0e 94 8c 05 	call	0xb18	; 0xb18 <sink_ship>
     f0e:	27 c0       	rjmp	.+78     	; 0xf5e <check_for_sunken_ships+0xd0>
					}
				} else {
					//else if no sea down or out of bounds, go up, else go down
					if ((row-1 < 0) || ((grid[row-1][col] & ~HIT) == SEA)) {	
     f10:	8d 2f       	mov	r24, r29
     f12:	0d 2e       	mov	r0, r29
     f14:	00 0c       	add	r0, r0
     f16:	99 0b       	sbc	r25, r25
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	92 f0       	brmi	.+36     	; 0xf40 <check_for_sunken_ships+0xb2>
     f1c:	41 50       	subi	r20, 0x01	; 1
     f1e:	50 4e       	sbci	r21, 0xE0	; 224
     f20:	44 0f       	add	r20, r20
     f22:	55 1f       	adc	r21, r21
     f24:	44 0f       	add	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	44 0f       	add	r20, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	4e 0d       	add	r20, r14
     f2e:	5f 1d       	adc	r21, r15
     f30:	fa 01       	movw	r30, r20
     f32:	e2 0f       	add	r30, r18
     f34:	f3 1f       	adc	r31, r19
     f36:	80 81       	ld	r24, Z
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	8f 77       	andi	r24, 0x7F	; 127
     f3c:	89 2b       	or	r24, r25
     f3e:	41 f4       	brne	.+16     	; 0xf50 <check_for_sunken_ships+0xc2>
						sink_ship(player, col, row, 's', grid);
     f40:	87 01       	movw	r16, r14
     f42:	23 e7       	ldi	r18, 0x73	; 115
     f44:	4d 2f       	mov	r20, r29
     f46:	6c 2f       	mov	r22, r28
     f48:	8d 2d       	mov	r24, r13
     f4a:	0e 94 8c 05 	call	0xb18	; 0xb18 <sink_ship>
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <check_for_sunken_ships+0xd0>
					} else {
						sink_ship(player, col, row, 'w', grid);
     f50:	87 01       	movw	r16, r14
     f52:	27 e7       	ldi	r18, 0x77	; 119
     f54:	4d 2f       	mov	r20, r29
     f56:	6c 2f       	mov	r22, r28
     f58:	8d 2d       	mov	r24, r13
     f5a:	0e 94 8c 05 	call	0xb18	; 0xb18 <sink_ship>
//check entire board for any ships that have been hit and not sunk, send coordinates and direction to sink_ship
void check_for_sunken_ships(uint8_t player, uint8_t grid[8][8]) {
		
	//loop through the board
	for (int8_t row = 7; row >= 0; row--) {
		for (int8_t col = 0; col < 8; col++) {
     f5e:	cf 5f       	subi	r28, 0xFF	; 255
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <check_for_sunken_ships+0xd6>
     f62:	c0 e0       	ldi	r28, 0x00	; 0
     f64:	c8 30       	cpi	r28, 0x08	; 8
     f66:	0c f4       	brge	.+2      	; 0xf6a <check_for_sunken_ships+0xdc>
     f68:	9d cf       	rjmp	.-198    	; 0xea4 <check_for_sunken_ships+0x16>

//check entire board for any ships that have been hit and not sunk, send coordinates and direction to sink_ship
void check_for_sunken_ships(uint8_t player, uint8_t grid[8][8]) {
		
	//loop through the board
	for (int8_t row = 7; row >= 0; row--) {
     f6a:	d1 50       	subi	r29, 0x01	; 1
     f6c:	dd 23       	and	r29, r29
     f6e:	cc f7       	brge	.-14     	; 0xf62 <check_for_sunken_ships+0xd4>
	//	printf("FINISHED for player");
	//} else {
	//	printf("FINISHED for computer");
	//}
	
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	df 90       	pop	r13
     f7e:	08 95       	ret

00000f80 <computer_turn>:
	}
	
	computer_turn();
}

void computer_turn(void) {
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
	
	//step through row, column and hit the first available space that hasn't been hit yet
	for (int8_t row = 7; row >= 0; row--) {
     f88:	67 e0       	ldi	r22, 0x07	; 7
     f8a:	48 c0       	rjmp	.+144    	; 0x101c <computer_turn+0x9c>
		for (int8_t col = 0; col < 8; col++) {
			if ((human_grid[row][col] & HIT) == 0) {
     f8c:	c6 2f       	mov	r28, r22
     f8e:	06 2e       	mov	r0, r22
     f90:	00 0c       	add	r0, r0
     f92:	dd 0b       	sbc	r29, r29
     f94:	08 2f       	mov	r16, r24
     f96:	08 2e       	mov	r0, r24
     f98:	00 0c       	add	r0, r0
     f9a:	11 0b       	sbc	r17, r17
     f9c:	fe 01       	movw	r30, r28
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	e4 52       	subi	r30, 0x24	; 36
     fac:	fd 4f       	sbci	r31, 0xFD	; 253
     fae:	e0 0f       	add	r30, r16
     fb0:	f1 1f       	adc	r31, r17
     fb2:	90 81       	ld	r25, Z
     fb4:	99 23       	and	r25, r25
     fb6:	5c f1       	brlt	.+86     	; 0x100e <computer_turn+0x8e>
				if ((human_grid[row][col] != 0) && (human_grid[row][col] & SHIP_MASK) ) {
     fb8:	99 23       	and	r25, r25
     fba:	c1 f0       	breq	.+48     	; 0xfec <computer_turn+0x6c>
     fbc:	97 70       	andi	r25, 0x07	; 7
     fbe:	b1 f0       	breq	.+44     	; 0xfec <computer_turn+0x6c>
					ledmatrix_draw_pixel_in_human_grid(col, row, COLOUR_RED);					
     fc0:	4f e0       	ldi	r20, 0x0F	; 15
     fc2:	0e 94 2e 09 	call	0x125c	; 0x125c <ledmatrix_draw_pixel_in_human_grid>
					human_grid[row][col] |= HIT;
     fc6:	cc 0f       	add	r28, r28
     fc8:	dd 1f       	adc	r29, r29
     fca:	cc 0f       	add	r28, r28
     fcc:	dd 1f       	adc	r29, r29
     fce:	cc 0f       	add	r28, r28
     fd0:	dd 1f       	adc	r29, r29
     fd2:	c4 52       	subi	r28, 0x24	; 36
     fd4:	dd 4f       	sbci	r29, 0xFD	; 253
     fd6:	c0 0f       	add	r28, r16
     fd8:	d1 1f       	adc	r29, r17
     fda:	88 81       	ld	r24, Y
     fdc:	80 68       	ori	r24, 0x80	; 128
     fde:	88 83       	st	Y, r24
					check_for_sunken_ships(0, human_grid);
     fe0:	6c ed       	ldi	r22, 0xDC	; 220
     fe2:	72 e0       	ldi	r23, 0x02	; 2
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	0e 94 47 07 	call	0xe8e	; 0xe8e <check_for_sunken_ships>
					return;
     fea:	1a c0       	rjmp	.+52     	; 0x1020 <computer_turn+0xa0>
				} else {
					ledmatrix_draw_pixel_in_human_grid(col, row, COLOUR_GREEN);
     fec:	40 ef       	ldi	r20, 0xF0	; 240
     fee:	0e 94 2e 09 	call	0x125c	; 0x125c <ledmatrix_draw_pixel_in_human_grid>
					human_grid[row][col] |= HIT;
     ff2:	cc 0f       	add	r28, r28
     ff4:	dd 1f       	adc	r29, r29
     ff6:	cc 0f       	add	r28, r28
     ff8:	dd 1f       	adc	r29, r29
     ffa:	cc 0f       	add	r28, r28
     ffc:	dd 1f       	adc	r29, r29
     ffe:	c4 52       	subi	r28, 0x24	; 36
    1000:	dd 4f       	sbci	r29, 0xFD	; 253
    1002:	c0 0f       	add	r28, r16
    1004:	d1 1f       	adc	r29, r17
    1006:	88 81       	ld	r24, Y
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	88 83       	st	Y, r24
					return;
    100c:	09 c0       	rjmp	.+18     	; 0x1020 <computer_turn+0xa0>

void computer_turn(void) {
	
	//step through row, column and hit the first available space that hasn't been hit yet
	for (int8_t row = 7; row >= 0; row--) {
		for (int8_t col = 0; col < 8; col++) {
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <computer_turn+0x94>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	88 30       	cpi	r24, 0x08	; 8
    1016:	0c f4       	brge	.+2      	; 0x101a <computer_turn+0x9a>
    1018:	b9 cf       	rjmp	.-142    	; 0xf8c <computer_turn+0xc>
}

void computer_turn(void) {
	
	//step through row, column and hit the first available space that hasn't been hit yet
	for (int8_t row = 7; row >= 0; row--) {
    101a:	61 50       	subi	r22, 0x01	; 1
    101c:	66 23       	and	r22, r22
    101e:	cc f7       	brge	.-14     	; 0x1012 <computer_turn+0x92>
					return;
				}
			}
		}
	}
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret

0000102a <player_turn>:
	//	printf("FINISHED for computer");
	//}
	
}

void player_turn(void) {
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	64 97       	sbiw	r28, 0x14	; 20
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61

	//handle invalid move
	if (computer_grid[7 - cursor_y][cursor_x] & HIT) {
    103e:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <cursor_y>
    1042:	27 e0       	ldi	r18, 0x07	; 7
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	26 1b       	sub	r18, r22
    1048:	31 09       	sbc	r19, r1
    104a:	67 fd       	sbrc	r22, 7
    104c:	33 95       	inc	r19
    104e:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <cursor_x>
    1052:	e8 2f       	mov	r30, r24
    1054:	08 2e       	mov	r0, r24
    1056:	00 0c       	add	r0, r0
    1058:	ff 0b       	sbc	r31, r31
    105a:	d9 01       	movw	r26, r18
    105c:	aa 0f       	add	r26, r26
    105e:	bb 1f       	adc	r27, r27
    1060:	aa 0f       	add	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	aa 0f       	add	r26, r26
    1066:	bb 1f       	adc	r27, r27
    1068:	a4 5e       	subi	r26, 0xE4	; 228
    106a:	bc 4f       	sbci	r27, 0xFC	; 252
    106c:	ae 0f       	add	r26, r30
    106e:	bf 1f       	adc	r27, r31
    1070:	4c 91       	ld	r20, X
    1072:	44 23       	and	r20, r20
    1074:	0c f0       	brlt	.+2      	; 0x1078 <player_turn+0x4e>
    1076:	4b c0       	rjmp	.+150    	; 0x110e <player_turn+0xe4>
		
		move_terminal_cursor(0, 1);
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
		
		char invalidMoveMessage[20] = "Invalid move";
    1084:	2d e0       	ldi	r18, 0x0D	; 13
    1086:	e0 e9       	ldi	r30, 0x90	; 144
    1088:	f1 e0       	ldi	r31, 0x01	; 1
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	dc 01       	movw	r26, r24
    1090:	01 90       	ld	r0, Z+
    1092:	0d 92       	st	X+, r0
    1094:	2a 95       	dec	r18
    1096:	e1 f7       	brne	.-8      	; 0x1090 <player_turn+0x66>
    1098:	fe 01       	movw	r30, r28
    109a:	3e 96       	adiw	r30, 0x0e	; 14
    109c:	27 e0       	ldi	r18, 0x07	; 7
    109e:	df 01       	movw	r26, r30
    10a0:	1d 92       	st	X+, r1
    10a2:	2a 95       	dec	r18
    10a4:	e9 f7       	brne	.-6      	; 0x10a0 <player_turn+0x76>
		uint8_t messageLength = strlen(invalidMoveMessage);
    10a6:	fc 01       	movw	r30, r24
    10a8:	01 90       	ld	r0, Z+
    10aa:	00 20       	and	r0, r0
    10ac:	e9 f7       	brne	.-6      	; 0x10a8 <player_turn+0x7e>
    10ae:	31 97       	sbiw	r30, 0x01	; 1
    10b0:	e8 1b       	sub	r30, r24
		
		for (uint8_t i = 0; i < invalidMoves && messageLength < sizeof(invalidMoveMessage) - 1; i++) {
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0a c0       	rjmp	.+20     	; 0x10ca <player_turn+0xa0>
			invalidMoveMessage[messageLength++] = '!';
    10b6:	a1 e0       	ldi	r26, 0x01	; 1
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ac 0f       	add	r26, r28
    10bc:	bd 1f       	adc	r27, r29
    10be:	ae 0f       	add	r26, r30
    10c0:	b1 1d       	adc	r27, r1
    10c2:	91 e2       	ldi	r25, 0x21	; 33
    10c4:	9c 93       	st	X, r25
		move_terminal_cursor(0, 1);
		
		char invalidMoveMessage[20] = "Invalid move";
		uint8_t messageLength = strlen(invalidMoveMessage);
		
		for (uint8_t i = 0; i < invalidMoves && messageLength < sizeof(invalidMoveMessage) - 1; i++) {
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
			invalidMoveMessage[messageLength++] = '!';
    10c8:	ef 5f       	subi	r30, 0xFF	; 255
		move_terminal_cursor(0, 1);
		
		char invalidMoveMessage[20] = "Invalid move";
		uint8_t messageLength = strlen(invalidMoveMessage);
		
		for (uint8_t i = 0; i < invalidMoves && messageLength < sizeof(invalidMoveMessage) - 1; i++) {
    10ca:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <invalidMoves>
    10ce:	89 17       	cp	r24, r25
    10d0:	10 f4       	brcc	.+4      	; 0x10d6 <player_turn+0xac>
    10d2:	e3 31       	cpi	r30, 0x13	; 19
    10d4:	80 f3       	brcs	.-32     	; 0x10b6 <player_turn+0x8c>
			invalidMoveMessage[messageLength++] = '!';
		}
		invalidMoveMessage[messageLength] = '\0';
    10d6:	ce 01       	movw	r24, r28
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	9c 01       	movw	r18, r24
    10dc:	2e 0f       	add	r18, r30
    10de:	31 1d       	adc	r19, r1
    10e0:	f9 01       	movw	r30, r18
    10e2:	10 82       	st	Z, r1
		
		printf("%s", invalidMoveMessage);
    10e4:	9f 93       	push	r25
    10e6:	8f 93       	push	r24
    10e8:	8a e3       	ldi	r24, 0x3A	; 58
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	9f 93       	push	r25
    10ee:	8f 93       	push	r24
    10f0:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <printf>
		
		if (invalidMoves < 3) {
    10f4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <invalidMoves>
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	08 f0       	brcs	.+2      	; 0x1106 <player_turn+0xdc>
    1104:	45 c0       	rjmp	.+138    	; 0x1190 <player_turn+0x166>
			invalidMoves++;
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <invalidMoves>
    110c:	41 c0       	rjmp	.+130    	; 0x1190 <player_turn+0x166>
		return;
	}


	//draw red for hit green for miss
	if (computer_grid[7 - cursor_y][cursor_x] != 0) {
    110e:	44 23       	and	r20, r20
    1110:	d1 f0       	breq	.+52     	; 0x1146 <player_turn+0x11c>
		computer_grid[7 - cursor_y][cursor_x] |= HIT;
    1112:	c9 01       	movw	r24, r18
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	84 5e       	subi	r24, 0xE4	; 228
    1122:	9c 4f       	sbci	r25, 0xFC	; 252
    1124:	e8 0f       	add	r30, r24
    1126:	f9 1f       	adc	r31, r25
    1128:	40 68       	ori	r20, 0x80	; 128
    112a:	40 83       	st	Z, r20
		check_for_sunken_ships(1, computer_grid);
    112c:	6c e1       	ldi	r22, 0x1C	; 28
    112e:	73 e0       	ldi	r23, 0x03	; 3
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 47 07 	call	0xe8e	; 0xe8e <check_for_sunken_ships>
		ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_RED);
    1136:	4f e0       	ldi	r20, 0x0F	; 15
    1138:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <cursor_y>
    113c:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <cursor_x>
    1140:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
    1144:	0f c0       	rjmp	.+30     	; 0x1164 <player_turn+0x13a>
	} else {
		computer_grid[7 - cursor_y][cursor_x] |= HIT;
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	22 0f       	add	r18, r18
    1150:	33 1f       	adc	r19, r19
    1152:	24 5e       	subi	r18, 0xE4	; 228
    1154:	3c 4f       	sbci	r19, 0xFC	; 252
    1156:	e2 0f       	add	r30, r18
    1158:	f3 1f       	adc	r31, r19
    115a:	40 68       	ori	r20, 0x80	; 128
    115c:	40 83       	st	Z, r20
		ledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_GREEN);
    115e:	40 ef       	ldi	r20, 0xF0	; 240
    1160:	0e 94 35 09 	call	0x126a	; 0x126a <ledmatrix_draw_pixel_in_computer_grid>
	}
	
	//clear terminal and invalid moves value on valid move
	if (invalidMoves != 0) {
    1164:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <invalidMoves>
    1168:	88 23       	and	r24, r24
    116a:	81 f0       	breq	.+32     	; 0x118c <player_turn+0x162>
		move_terminal_cursor(0, 0);
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
		printf("                        ");
    1178:	89 ea       	ldi	r24, 0xA9	; 169
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	9f 93       	push	r25
    117e:	8f 93       	push	r24
    1180:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <printf>
		invalidMoves = 0;
    1184:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <invalidMoves>
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
	}
	
	computer_turn();
    118c:	0e 94 c0 07 	call	0xf80	; 0xf80 <computer_turn>
}
    1190:	64 96       	adiw	r28, 0x14	; 20
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <is_game_over>:
{
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	//return 0;
	
	for (int8_t row = 7; row >= 0; row--) {
    11a2:	37 e0       	ldi	r19, 0x07	; 7
    11a4:	18 c0       	rjmp	.+48     	; 0x11d6 <is_game_over+0x34>
		for (int8_t col = 0; col < 8; col++) {
			if ((human_grid[row][col] & SHIP_MASK) && !(human_grid[row][col] & SUNK)) {
    11a6:	88 e0       	ldi	r24, 0x08	; 8
    11a8:	38 02       	muls	r19, r24
    11aa:	f0 01       	movw	r30, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	e4 52       	subi	r30, 0x24	; 36
    11b0:	fd 4f       	sbci	r31, 0xFD	; 253
    11b2:	e9 0f       	add	r30, r25
    11b4:	f1 1d       	adc	r31, r1
    11b6:	97 fd       	sbrc	r25, 7
    11b8:	fa 95       	dec	r31
    11ba:	20 81       	ld	r18, Z
    11bc:	82 2f       	mov	r24, r18
    11be:	87 70       	andi	r24, 0x07	; 7
    11c0:	21 f0       	breq	.+8      	; 0x11ca <is_game_over+0x28>
    11c2:	82 2f       	mov	r24, r18
    11c4:	80 74       	andi	r24, 0x40	; 64
    11c6:	26 ff       	sbrs	r18, 6
    11c8:	25 c0       	rjmp	.+74     	; 0x1214 <is_game_over+0x72>
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	//return 0;
	
	for (int8_t row = 7; row >= 0; row--) {
		for (int8_t col = 0; col < 8; col++) {
    11ca:	9f 5f       	subi	r25, 0xFF	; 255
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <is_game_over+0x2e>
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	98 30       	cpi	r25, 0x08	; 8
    11d2:	4c f3       	brlt	.-46     	; 0x11a6 <is_game_over+0x4>
{
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	//return 0;
	
	for (int8_t row = 7; row >= 0; row--) {
    11d4:	31 50       	subi	r19, 0x01	; 1
    11d6:	33 23       	and	r19, r19
    11d8:	d4 f7       	brge	.-12     	; 0x11ce <is_game_over+0x2c>
    11da:	37 e0       	ldi	r19, 0x07	; 7
    11dc:	18 c0       	rjmp	.+48     	; 0x120e <is_game_over+0x6c>
		}
	}
	
	for (int8_t row = 7; row >= 0; row--) {
		for (int8_t col = 0; col < 8; col++) {
			if ((computer_grid[row][col] & SHIP_MASK) && !(computer_grid[row][col] & SUNK)) {
    11de:	88 e0       	ldi	r24, 0x08	; 8
    11e0:	38 02       	muls	r19, r24
    11e2:	f0 01       	movw	r30, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	e4 5e       	subi	r30, 0xE4	; 228
    11e8:	fc 4f       	sbci	r31, 0xFC	; 252
    11ea:	e9 0f       	add	r30, r25
    11ec:	f1 1d       	adc	r31, r1
    11ee:	97 fd       	sbrc	r25, 7
    11f0:	fa 95       	dec	r31
    11f2:	20 81       	ld	r18, Z
    11f4:	82 2f       	mov	r24, r18
    11f6:	87 70       	andi	r24, 0x07	; 7
    11f8:	21 f0       	breq	.+8      	; 0x1202 <is_game_over+0x60>
    11fa:	82 2f       	mov	r24, r18
    11fc:	80 74       	andi	r24, 0x40	; 64
    11fe:	26 ff       	sbrs	r18, 6
    1200:	09 c0       	rjmp	.+18     	; 0x1214 <is_game_over+0x72>
			}
		}
	}
	
	for (int8_t row = 7; row >= 0; row--) {
		for (int8_t col = 0; col < 8; col++) {
    1202:	9f 5f       	subi	r25, 0xFF	; 255
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <is_game_over+0x66>
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	98 30       	cpi	r25, 0x08	; 8
    120a:	4c f3       	brlt	.-46     	; 0x11de <is_game_over+0x3c>
				return 0;
			}
		}
	}
	
	for (int8_t row = 7; row >= 0; row--) {
    120c:	31 50       	subi	r19, 0x01	; 1
    120e:	33 23       	and	r19, r19
    1210:	d4 f7       	brge	.-12     	; 0x1206 <is_game_over+0x64>
			if ((computer_grid[row][col] & SHIP_MASK) && !(computer_grid[row][col] & SUNK)) {
				return 0;
			}
		}
	}
	return 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
}
    1214:	08 95       	ret

00001216 <ledmatrix_setup>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1216:	80 e8       	ldi	r24, 0x80	; 128
    1218:	0e 94 4a 0c 	call	0x1894	; 0x1894 <spi_setup_master>
    121c:	08 95       	ret

0000121e <ledmatrix_update_pixel>:
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	80 31       	cpi	r24, 0x10	; 16
    1226:	b0 f4       	brcc	.+44     	; 0x1254 <ledmatrix_update_pixel+0x36>
    1228:	68 30       	cpi	r22, 0x08	; 8
    122a:	a0 f4       	brcc	.+40     	; 0x1254 <ledmatrix_update_pixel+0x36>
    122c:	14 2f       	mov	r17, r20
    122e:	c6 2f       	mov	r28, r22
    1230:	d8 2f       	mov	r29, r24
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	0e 94 76 0c 	call	0x18ec	; 0x18ec <spi_send_byte>
    1238:	6c 2f       	mov	r22, r28
    123a:	67 70       	andi	r22, 0x07	; 7
    123c:	80 e1       	ldi	r24, 0x10	; 16
    123e:	68 9f       	mul	r22, r24
    1240:	90 01       	movw	r18, r0
    1242:	11 24       	eor	r1, r1
    1244:	8d 2f       	mov	r24, r29
    1246:	8f 70       	andi	r24, 0x0F	; 15
    1248:	82 2b       	or	r24, r18
    124a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <spi_send_byte>
    124e:	81 2f       	mov	r24, r17
    1250:	0e 94 76 0c 	call	0x18ec	; 0x18ec <spi_send_byte>
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	08 95       	ret

0000125c <ledmatrix_draw_pixel_in_human_grid>:
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	20 f4       	brcc	.+8      	; 0x1268 <ledmatrix_draw_pixel_in_human_grid+0xc>
    1260:	68 30       	cpi	r22, 0x08	; 8
    1262:	10 f4       	brcc	.+4      	; 0x1268 <ledmatrix_draw_pixel_in_human_grid+0xc>
    1264:	0e 94 0f 09 	call	0x121e	; 0x121e <ledmatrix_update_pixel>
    1268:	08 95       	ret

0000126a <ledmatrix_draw_pixel_in_computer_grid>:
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	28 f4       	brcc	.+10     	; 0x1278 <ledmatrix_draw_pixel_in_computer_grid+0xe>
    126e:	68 30       	cpi	r22, 0x08	; 8
    1270:	18 f4       	brcc	.+6      	; 0x1278 <ledmatrix_draw_pixel_in_computer_grid+0xe>
    1272:	88 5f       	subi	r24, 0xF8	; 248
    1274:	0e 94 0f 09 	call	0x121e	; 0x121e <ledmatrix_update_pixel>
    1278:	08 95       	ret

0000127a <ledmatrix_update_column>:
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	80 31       	cpi	r24, 0x10	; 16
    1282:	a0 f4       	brcc	.+40     	; 0x12ac <ledmatrix_update_column+0x32>
    1284:	8b 01       	movw	r16, r22
    1286:	c8 2f       	mov	r28, r24
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <spi_send_byte>
    128e:	8c 2f       	mov	r24, r28
    1290:	8f 70       	andi	r24, 0x0F	; 15
    1292:	0e 94 76 0c 	call	0x18ec	; 0x18ec <spi_send_byte>
    1296:	c0 e0       	ldi	r28, 0x00	; 0
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <ledmatrix_update_column+0x2e>
    129a:	f8 01       	movw	r30, r16
    129c:	ec 0f       	add	r30, r28
    129e:	f1 1d       	adc	r31, r1
    12a0:	80 81       	ld	r24, Z
    12a2:	0e 94 76 0c 	call	0x18ec	; 0x18ec <spi_send_byte>
    12a6:	cf 5f       	subi	r28, 0xFF	; 255
    12a8:	c8 30       	cpi	r28, 0x08	; 8
    12aa:	b8 f3       	brcs	.-18     	; 0x129a <ledmatrix_update_column+0x20>
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	08 95       	ret

000012b4 <ledmatrix_shift_display_left>:
    12b4:	84 e0       	ldi	r24, 0x04	; 4
    12b6:	0e 94 76 0c 	call	0x18ec	; 0x18ec <spi_send_byte>
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	0e 94 76 0c 	call	0x18ec	; 0x18ec <spi_send_byte>
    12c0:	08 95       	ret

000012c2 <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    12c2:	8f e0       	ldi	r24, 0x0F	; 15
    12c4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <spi_send_byte>
    12c8:	08 95       	ret

000012ca <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
    12ca:	0e 94 0b 09 	call	0x1216	; 0x1216 <ledmatrix_setup>
	init_button_interrupts();
    12ce:	0e 94 59 02 	call	0x4b2	; 0x4b2 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	7b e4       	ldi	r23, 0x4B	; 75
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <init_serial_stdio>
	
	init_timer0();
    12e0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <init_timer0>
	init_timer1();
    12e4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <init_timer1>
	init_timer2();
    12e8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <init_timer2>
	
	// Turn on global interrupts
	sei();
    12ec:	78 94       	sei
    12ee:	08 95       	ret

000012f0 <start_screen>:
}

void start_screen(void)
{
    12f0:	8f 92       	push	r8
    12f2:	9f 92       	push	r9
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	cf 93       	push	r28
	// Clear terminal screen and output a message
	clear_terminal();
    1302:	0e 94 8d 0c 	call	0x191a	; 0x191a <clear_terminal>
	hide_cursor();
    1306:	0e 94 a3 0c 	call	0x1946	; 0x1946 <hide_cursor>
	set_display_attribute(FG_WHITE);
    130a:	85 e2       	ldi	r24, 0x25	; 37
    130c:	0e 94 96 0c 	call	0x192c	; 0x192c <set_display_attribute>
	move_terminal_cursor(10,4);
    1310:	64 e0       	ldi	r22, 0x04	; 4
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	8a e0       	ldi	r24, 0x0A	; 10
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR(" _______    ______  ________  ________  __        ________   ______   __    __  ______  _______  "));
    131c:	86 ef       	ldi	r24, 0xF6	; 246
    131e:	93 e0       	ldi	r25, 0x03	; 3
    1320:	9f 93       	push	r25
    1322:	8f 93       	push	r24
    1324:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,5);
    1328:	65 e0       	ldi	r22, 0x05	; 5
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	8a e0       	ldi	r24, 0x0A	; 10
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR("|       \\  /      \\|        \\|        \\|  \\      |        \\ /      \\ |  \\  |  \\|      \\|       \\ "));
    1334:	84 e9       	ldi	r24, 0x94	; 148
    1336:	93 e0       	ldi	r25, 0x03	; 3
    1338:	9f 93       	push	r25
    133a:	8f 93       	push	r24
    133c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,6);
    1340:	66 e0       	ldi	r22, 0x06	; 6
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	8a e0       	ldi	r24, 0x0A	; 10
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$\\|  $$$$$$\\\\$$$$$$$$ \\$$$$$$$$| $$      | $$$$$$$$|  $$$$$$\\| $$  | $$ \\$$$$$$| $$$$$$$\\"));
    134c:	82 e3       	ldi	r24, 0x32	; 50
    134e:	93 e0       	ldi	r25, 0x03	; 3
    1350:	9f 93       	push	r25
    1352:	8f 93       	push	r24
    1354:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,7);
    1358:	67 e0       	ldi	r22, 0x07	; 7
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	8a e0       	ldi	r24, 0x0A	; 10
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR("| $$__/ $$| $$__| $$  | $$      | $$   | $$      | $$__    | $$___\\$$| $$__| $$  | $$  | $$__/ $$"));
    1364:	80 ed       	ldi	r24, 0xD0	; 208
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	9f 93       	push	r25
    136a:	8f 93       	push	r24
    136c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,8);
    1370:	68 e0       	ldi	r22, 0x08	; 8
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	8a e0       	ldi	r24, 0x0A	; 10
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$| $$    $$  | $$      | $$   | $$      | $$  \\    \\$$    \\ | $$    $$  | $$  | $$    $$"));
    137c:	8e e6       	ldi	r24, 0x6E	; 110
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	9f 93       	push	r25
    1382:	8f 93       	push	r24
    1384:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,9);
    1388:	69 e0       	ldi	r22, 0x09	; 9
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	8a e0       	ldi	r24, 0x0A	; 10
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$\\| $$$$$$$$  | $$      | $$   | $$      | $$$$$    _\\$$$$$$\\| $$$$$$$$  | $$  | $$$$$$$ "));
    1394:	8c e0       	ldi	r24, 0x0C	; 12
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	9f 93       	push	r25
    139a:	8f 93       	push	r24
    139c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,10);
    13a0:	6a e0       	ldi	r22, 0x0A	; 10
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	8a e0       	ldi	r24, 0x0A	; 10
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR("| $$__/ $$| $$  | $$  | $$      | $$   | $$_____ | $$_____ |  \\__| $$| $$  | $$ _| $$_ | $$      "));
    13ac:	8a ea       	ldi	r24, 0xAA	; 170
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	9f 93       	push	r25
    13b2:	8f 93       	push	r24
    13b4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,11);
    13b8:	6b e0       	ldi	r22, 0x0B	; 11
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	8a e0       	ldi	r24, 0x0A	; 10
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$| $$  | $$  | $$      | $$   | $$     \\| $$     \\ \\$$    $$| $$  | $$|   $$ \\| $$      "));
    13c4:	88 e4       	ldi	r24, 0x48	; 72
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	9f 93       	push	r25
    13ca:	8f 93       	push	r24
    13cc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,12);
    13d0:	6c e0       	ldi	r22, 0x0C	; 12
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	8a e0       	ldi	r24, 0x0A	; 10
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR(" \\$$$$$$$  \\$$   \\$$   \\$$       \\$$    \\$$$$$$$$ \\$$$$$$$$  \\$$$$$$  \\$$   \\$$ \\$$$$$$ \\$$      "));
    13dc:	86 ee       	ldi	r24, 0xE6	; 230
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9f 93       	push	r25
    13e2:	8f 93       	push	r24
    13e4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,14);
    13e8:	6e e0       	ldi	r22, 0x0E	; 14
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	8a e0       	ldi	r24, 0x0A	; 10
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 Project by Andrew Wilson - 48280411"));
    13f4:	84 eb       	ldi	r24, 0xB4	; 180
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9f 93       	push	r25
    13fa:	8f 93       	push	r24
    13fc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
    1400:	0e 94 d7 02 	call	0x5ae	; 0x5ae <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
    1404:	0e 94 c2 0c 	call	0x1984	; 0x1984 <get_current_time>
    1408:	4b 01       	movw	r8, r22
    140a:	5c 01       	movw	r10, r24
    140c:	8d b7       	in	r24, 0x3d	; 61
    140e:	9e b7       	in	r25, 0x3e	; 62
    1410:	44 96       	adiw	r24, 0x14	; 20
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	9e bf       	out	0x3e, r25	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	8d bf       	out	0x3d, r24	; 61
	
	int8_t frame_number = -2*ANIMATION_DELAY;
    141c:	c4 ef       	ldi	r28, 0xF4	; 244
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <start_screen+0x134>
	// Turn on global interrupts
	sei();
}

void start_screen(void)
{
    1420:	46 01       	movw	r8, r12
    1422:	57 01       	movw	r10, r14
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
    1424:	0e 94 a9 0b 	call	0x1752	; 0x1752 <serial_input_available>
    1428:	88 23       	and	r24, r24
    142a:	39 f0       	breq	.+14     	; 0x143a <start_screen+0x14a>
		{
			serial_input = fgetc(stdin);
    142c:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <__iob>
    1430:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <__iob+0x1>
    1434:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <fgetc>
    1438:	01 c0       	rjmp	.+2      	; 0x143c <start_screen+0x14c>
	{
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    143a:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
    143c:	83 37       	cpi	r24, 0x73	; 115
    143e:	f9 f0       	breq	.+62     	; 0x147e <start_screen+0x18e>
    1440:	83 35       	cpi	r24, 0x53	; 83
    1442:	e9 f0       	breq	.+58     	; 0x147e <start_screen+0x18e>
		{
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
    1444:	0e 94 69 02 	call	0x4d2	; 0x4d2 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
    1448:	8f 3f       	cpi	r24, 0xFF	; 255
    144a:	c9 f4       	brne	.+50     	; 0x147e <start_screen+0x18e>
		{
			break;
		}

		// every 200 ms, update the animation
		current_time = get_current_time();
    144c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <get_current_time>
    1450:	6b 01       	movw	r12, r22
    1452:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > 200)
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	88 19       	sub	r24, r8
    145a:	99 09       	sbc	r25, r9
    145c:	aa 09       	sbc	r26, r10
    145e:	bb 09       	sbc	r27, r11
    1460:	89 3c       	cpi	r24, 0xC9	; 201
    1462:	91 05       	cpc	r25, r1
    1464:	a1 05       	cpc	r26, r1
    1466:	b1 05       	cpc	r27, r1
    1468:	e8 f2       	brcs	.-70     	; 0x1424 <start_screen+0x134>
		{
			update_start_screen(frame_number);
    146a:	8c 2f       	mov	r24, r28
    146c:	0e 94 1f 03 	call	0x63e	; 0x63e <update_start_screen>
			frame_number++;
    1470:	8c 2f       	mov	r24, r28
    1472:	cf 5f       	subi	r28, 0xFF	; 255
			if (frame_number > ANIMATION_LENGTH)
    1474:	ca 33       	cpi	r28, 0x3A	; 58
    1476:	a4 f2       	brlt	.-88     	; 0x1420 <start_screen+0x130>
			{
				frame_number -= ANIMATION_LENGTH+ANIMATION_DELAY;
    1478:	c2 ec       	ldi	r28, 0xC2	; 194
    147a:	c8 0f       	add	r28, r24
    147c:	d1 cf       	rjmp	.-94     	; 0x1420 <start_screen+0x130>
			}
			last_screen_update = current_time;
		}
	}
}
    147e:	cf 91       	pop	r28
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	bf 90       	pop	r11
    148a:	af 90       	pop	r10
    148c:	9f 90       	pop	r9
    148e:	8f 90       	pop	r8
    1490:	08 95       	ret

00001492 <new_game>:

void new_game(void)
{
	// Clear the serial terminal
	clear_terminal();
    1492:	0e 94 8d 0c 	call	0x191a	; 0x191a <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
    1496:	0e 94 95 03 	call	0x72a	; 0x72a <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    149a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <button_pushed>
	clear_serial_input_buffer();
    149e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <clear_serial_input_buffer>
    14a2:	08 95       	ret

000014a4 <play_game>:
	
}

void play_game(void)
{
    14a4:	8f 92       	push	r8
    14a6:	9f 92       	push	r9
    14a8:	af 92       	push	r10
    14aa:	bf 92       	push	r11
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
	
	uint32_t last_flash_time, current_time;
	int8_t btn; // The button pushed
	
	last_flash_time = get_current_time();
    14b8:	0e 94 c2 0c 	call	0x1984	; 0x1984 <get_current_time>
    14bc:	4b 01       	movw	r8, r22
    14be:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while (!is_game_over())
    14c0:	51 c0       	rjmp	.+162    	; 0x1564 <play_game+0xc0>
	{
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    14c2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <button_pushed>
    14c6:	d8 2f       	mov	r29, r24

		char key = -1;
		if (serial_input_available())
    14c8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <serial_input_available>
    14cc:	88 23       	and	r24, r24
    14ce:	41 f0       	breq	.+16     	; 0x14e0 <play_game+0x3c>
		{
			key = fgetc(stdin);
    14d0:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <__iob>
    14d4:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <__iob+0x1>
    14d8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <fgetc>
    14dc:	c8 2f       	mov	r28, r24
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <play_game+0x3e>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();

		char key = -1;
    14e0:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
			key = fgetc(stdin);
		}
		//move right
		if (btn == BUTTON0_PUSHED || key == 'D' || key == 'd')
    14e2:	dd 23       	and	r29, r29
    14e4:	21 f0       	breq	.+8      	; 0x14ee <play_game+0x4a>
    14e6:	c4 34       	cpi	r28, 0x44	; 68
    14e8:	11 f0       	breq	.+4      	; 0x14ee <play_game+0x4a>
    14ea:	c4 36       	cpi	r28, 0x64	; 100
    14ec:	21 f4       	brne	.+8      	; 0x14f6 <play_game+0x52>
		{
			move_cursor(1, 0);
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <move_cursor>
		}
		//move down
		if (btn == BUTTON1_PUSHED || key == 'S' || key == 's')
    14f6:	d1 30       	cpi	r29, 0x01	; 1
    14f8:	21 f0       	breq	.+8      	; 0x1502 <play_game+0x5e>
    14fa:	c3 35       	cpi	r28, 0x53	; 83
    14fc:	11 f0       	breq	.+4      	; 0x1502 <play_game+0x5e>
    14fe:	c3 37       	cpi	r28, 0x73	; 115
    1500:	21 f4       	brne	.+8      	; 0x150a <play_game+0x66>
		{
			move_cursor(0, -1);
    1502:	6f ef       	ldi	r22, 0xFF	; 255
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	0e 94 71 04 	call	0x8e2	; 0x8e2 <move_cursor>
		}
		//move up
		if (btn == BUTTON2_PUSHED  || key == 'W' || key == 'w')
    150a:	d2 30       	cpi	r29, 0x02	; 2
    150c:	21 f0       	breq	.+8      	; 0x1516 <play_game+0x72>
    150e:	c7 35       	cpi	r28, 0x57	; 87
    1510:	11 f0       	breq	.+4      	; 0x1516 <play_game+0x72>
    1512:	c7 37       	cpi	r28, 0x77	; 119
    1514:	21 f4       	brne	.+8      	; 0x151e <play_game+0x7a>
		{
			move_cursor(0, 1);
    1516:	61 e0       	ldi	r22, 0x01	; 1
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <move_cursor>
		}
		//move left
		if (btn == BUTTON3_PUSHED || key == 'A' || key == 'a')
    151e:	d3 30       	cpi	r29, 0x03	; 3
    1520:	21 f0       	breq	.+8      	; 0x152a <play_game+0x86>
    1522:	c1 34       	cpi	r28, 0x41	; 65
    1524:	11 f0       	breq	.+4      	; 0x152a <play_game+0x86>
    1526:	c1 36       	cpi	r28, 0x61	; 97
    1528:	21 f4       	brne	.+8      	; 0x1532 <play_game+0x8e>
		{
			move_cursor(-1, 0);
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <move_cursor>
		}
		if (key == 'F' || key == 'f') {
    1532:	c6 34       	cpi	r28, 0x46	; 70
    1534:	11 f0       	breq	.+4      	; 0x153a <play_game+0x96>
    1536:	c6 36       	cpi	r28, 0x66	; 102
    1538:	11 f4       	brne	.+4      	; 0x153e <play_game+0x9a>
			player_turn();
    153a:	0e 94 15 08 	call	0x102a	; 0x102a <player_turn>
		}
		current_time = get_current_time();
    153e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <get_current_time>
    1542:	6b 01       	movw	r12, r22
    1544:	7c 01       	movw	r14, r24
		if (current_time >= last_flash_time + 200)
    1546:	d5 01       	movw	r26, r10
    1548:	c4 01       	movw	r24, r8
    154a:	88 53       	subi	r24, 0x38	; 56
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	af 4f       	sbci	r26, 0xFF	; 255
    1550:	bf 4f       	sbci	r27, 0xFF	; 255
    1552:	c8 16       	cp	r12, r24
    1554:	d9 06       	cpc	r13, r25
    1556:	ea 06       	cpc	r14, r26
    1558:	fb 06       	cpc	r15, r27
    155a:	20 f0       	brcs	.+8      	; 0x1564 <play_game+0xc0>
		{
			// 200ms (0.2 second) has passed since the last time we advance the
			// notes here, so update the advance the notes
			flash_cursor();
    155c:	0e 94 03 04 	call	0x806	; 0x806 <flash_cursor>
			
			// Update the most recent time the notes were advance
			last_flash_time = current_time;
    1560:	46 01       	movw	r8, r12
    1562:	57 01       	movw	r10, r14
	int8_t btn; // The button pushed
	
	last_flash_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over())
    1564:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <is_game_over>
    1568:	88 23       	and	r24, r24
    156a:	09 f4       	brne	.+2      	; 0x156e <play_game+0xca>
    156c:	aa cf       	rjmp	.-172    	; 0x14c2 <play_game+0x1e>
			// Update the most recent time the notes were advance
			last_flash_time = current_time;
		}
	}
	// We get here if the game is over.
	move_terminal_cursor(0, 3);
    156e:	63 e0       	ldi	r22, 0x03	; 3
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf("Game over!");
    157a:	82 ec       	ldi	r24, 0xC2	; 194
    157c:	92 e0       	ldi	r25, 0x02	; 2
    157e:	9f 93       	push	r25
    1580:	8f 93       	push	r24
    1582:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <printf>
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	bf 90       	pop	r11
    1598:	af 90       	pop	r10
    159a:	9f 90       	pop	r9
    159c:	8f 90       	pop	r8
    159e:	08 95       	ret

000015a0 <handle_game_over>:

void handle_game_over()
{
	move_terminal_cursor(10,14);
    15a0:	6e e0       	ldi	r22, 0x0E	; 14
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	8a e0       	ldi	r24, 0x0A	; 10
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    15ac:	8a ea       	ldi	r24, 0xAA	; 170
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9f 93       	push	r25
    15b2:	8f 93       	push	r24
    15b4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	move_terminal_cursor(10,15);
    15b8:	6f e0       	ldi	r22, 0x0F	; 15
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	8a e0       	ldi	r24, 0x0A	; 10
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    15c4:	8c e7       	ldi	r24, 0x7C	; 124
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9f 93       	push	r25
    15ca:	8f 93       	push	r24
    15cc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED)
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <button_pushed>
    15dc:	8f 3f       	cpi	r24, 0xFF	; 255
    15de:	e1 f3       	breq	.-8      	; 0x15d8 <handle_game_over+0x38>
	{
		; // wait
	}
}
    15e0:	08 95       	ret

000015e2 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    15e2:	0e 94 65 09 	call	0x12ca	; 0x12ca <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    15e6:	0e 94 78 09 	call	0x12f0	; 0x12f0 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    15ea:	0e 94 49 0a 	call	0x1492	; 0x1492 <new_game>
		play_game();
    15ee:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <play_game>
		handle_game_over();
    15f2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <handle_game_over>
    15f6:	f9 cf       	rjmp	.-14     	; 0x15ea <main+0x8>

000015f8 <uart_put_char>:
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream)
{
    15f8:	cf 93       	push	r28
    15fa:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n')
    15fc:	8a 30       	cpi	r24, 0x0A	; 10
    15fe:	19 f4       	brne	.+6      	; 0x1606 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
    1600:	8d e0       	ldi	r24, 0x0D	; 13
    1602:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1606:	9f b7       	in	r25, 0x3f	; 63
    1608:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
    160c:	99 23       	and	r25, r25
    160e:	29 f1       	breq	.+74     	; 0x165a <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
    1610:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_out_buffer>
    1614:	8f 3f       	cpi	r24, 0xFF	; 255
    1616:	d1 f3       	breq	.-12     	; 0x160c <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1618:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    161a:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <out_insert_pos>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	8e 0f       	add	r24, r30
    1622:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <out_insert_pos>
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	e0 5a       	subi	r30, 0xA0	; 160
    162a:	fc 4f       	sbci	r31, 0xFC	; 252
    162c:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    162e:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_out_buffer>
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
    1638:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <out_insert_pos>
    163c:	8f 3f       	cpi	r24, 0xFF	; 255
    163e:	11 f4       	brne	.+4      	; 0x1644 <uart_put_char+0x4c>
	{
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1640:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1644:	e1 ec       	ldi	r30, 0xC1	; 193
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	80 62       	ori	r24, 0x20	; 32
    164c:	80 83       	st	Z, r24
	if (interrupts_enabled)
    164e:	99 23       	and	r25, r25
    1650:	39 f0       	breq	.+14     	; 0x1660 <uart_put_char+0x68>
	{
		sei();
    1652:	78 94       	sei
	}
	return 0;
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <uart_put_char+0x6c>
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <uart_put_char+0x6c>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
}
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <uart_get_char>:

int uart_get_char(FILE* stream)
{
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0)
    1668:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <bytes_in_input_buffer>
    166c:	88 23       	and	r24, r24
    166e:	e1 f3       	breq	.-8      	; 0x1668 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1670:	2f b7       	in	r18, 0x3f	; 63
    1672:	20 78       	andi	r18, 0x80	; 128
	cli();
    1674:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
    1676:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <input_insert_pos>
    167a:	30 91 71 04 	lds	r19, 0x0471	; 0x800471 <bytes_in_input_buffer>
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	83 1b       	sub	r24, r19
    1682:	91 09       	sbc	r25, r1
    1684:	5a f4       	brpl	.+22     	; 0x169c <uart_get_char+0x34>
	{
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1686:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <input_insert_pos>
    168a:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <bytes_in_input_buffer>
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	e8 1b       	sub	r30, r24
    1692:	f1 09       	sbc	r31, r1
    1694:	e0 59       	subi	r30, 0x90	; 144
    1696:	fb 4f       	sbci	r31, 0xFB	; 251
    1698:	80 81       	ld	r24, Z
    169a:	0a c0       	rjmp	.+20     	; 0x16b0 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    169c:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <input_insert_pos>
    16a0:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <bytes_in_input_buffer>
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	e8 1b       	sub	r30, r24
    16a8:	f1 09       	sbc	r31, r1
    16aa:	e0 5a       	subi	r30, 0xA0	; 160
    16ac:	fb 4f       	sbci	r31, 0xFB	; 251
    16ae:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    16b0:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <bytes_in_input_buffer>
    16b4:	91 50       	subi	r25, 0x01	; 1
    16b6:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <bytes_in_input_buffer>
	if (interrupts_enabled)
    16ba:	22 23       	and	r18, r18
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <uart_get_char+0x58>
	{
		sei();
    16be:	78 94       	sei
	}	
	return c;
}
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	08 95       	ret

000016c4 <init_serial_stdio>:
{
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    16c4:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <out_insert_pos>
	bytes_in_out_buffer = 0;
    16c8:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <bytes_in_out_buffer>
	input_insert_pos = 0;
    16cc:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <input_insert_pos>
	bytes_in_input_buffer = 0;
    16d0:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <bytes_in_input_buffer>
	input_overrun = 0;
    16d4:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    16d8:	40 93 d6 02 	sts	0x02D6, r20	; 0x8002d6 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	aa 1f       	adc	r26, r26
    16e6:	bb 1f       	adc	r27, r27
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	aa 1f       	adc	r26, r26
    16ee:	bb 1f       	adc	r27, r27
    16f0:	9c 01       	movw	r18, r24
    16f2:	ad 01       	movw	r20, r26
    16f4:	22 0f       	add	r18, r18
    16f6:	33 1f       	adc	r19, r19
    16f8:	44 1f       	adc	r20, r20
    16fa:	55 1f       	adc	r21, r21
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	72 e1       	ldi	r23, 0x12	; 18
    1700:	8a e7       	ldi	r24, 0x7A	; 122
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divmodsi4>
    1708:	ba 01       	movw	r22, r20
    170a:	a9 01       	movw	r20, r18
    170c:	4f 5f       	subi	r20, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255
    1710:	6f 4f       	sbci	r22, 0xFF	; 255
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	db 01       	movw	r26, r22
    1716:	ca 01       	movw	r24, r20
    1718:	1a f4       	brpl	.+6      	; 0x1720 <init_serial_stdio+0x5c>
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	a1 1d       	adc	r26, r1
    171e:	b1 1d       	adc	r27, r1
    1720:	b5 95       	asr	r27
    1722:	a7 95       	ror	r26
    1724:	97 95       	ror	r25
    1726:	87 95       	ror	r24
    1728:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    172a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    172e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1732:	e1 ec       	ldi	r30, 0xC1	; 193
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	88 e1       	ldi	r24, 0x18	; 24
    1738:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    173a:	80 81       	ld	r24, Z
    173c:	80 68       	ori	r24, 0x80	; 128
    173e:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1740:	e2 e7       	ldi	r30, 0x72	; 114
    1742:	f4 e0       	ldi	r31, 0x04	; 4
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	93 83       	std	Z+3, r25	; 0x03
    174a:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	80 83       	st	Z, r24
    1750:	08 95       	ret

00001752 <serial_input_available>:
}

int8_t serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
    1752:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <bytes_in_input_buffer>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	91 11       	cpse	r25, r1
    175a:	01 c0       	rjmp	.+2      	; 0x175e <serial_input_available+0xc>
    175c:	80 e0       	ldi	r24, 0x00	; 0
}
    175e:	08 95       	ret

00001760 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1760:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <input_insert_pos>
	bytes_in_input_buffer = 0;
    1764:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <bytes_in_input_buffer>
    1768:	08 95       	ret

0000176a <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    176a:	1f 92       	push	r1
    176c:	0f 92       	push	r0
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	0f 92       	push	r0
    1772:	11 24       	eor	r1, r1
    1774:	2f 93       	push	r18
    1776:	8f 93       	push	r24
    1778:	9f 93       	push	r25
    177a:	ef 93       	push	r30
    177c:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0)
    177e:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_out_buffer>
    1782:	88 23       	and	r24, r24
    1784:	29 f1       	breq	.+74     	; 0x17d0 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
    1786:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <out_insert_pos>
    178a:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <bytes_in_out_buffer>
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	82 1b       	sub	r24, r18
    1792:	91 09       	sbc	r25, r1
    1794:	5a f4       	brpl	.+22     	; 0x17ac <__vector_21+0x42>
		{
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1796:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <out_insert_pos>
    179a:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_out_buffer>
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	e8 1b       	sub	r30, r24
    17a2:	f1 09       	sbc	r31, r1
    17a4:	e1 5a       	subi	r30, 0xA1	; 161
    17a6:	fb 4f       	sbci	r31, 0xFB	; 251
    17a8:	90 81       	ld	r25, Z
    17aa:	0a c0       	rjmp	.+20     	; 0x17c0 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    17ac:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <out_insert_pos>
    17b0:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_out_buffer>
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	e8 1b       	sub	r30, r24
    17b8:	f1 09       	sbc	r31, r1
    17ba:	e0 5a       	subi	r30, 0xA0	; 160
    17bc:	fc 4f       	sbci	r31, 0xFC	; 252
    17be:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    17c0:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_out_buffer>
    17c4:	81 50       	subi	r24, 0x01	; 1
    17c6:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    17ca:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    17d0:	e1 ec       	ldi	r30, 0xC1	; 193
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	8f 7d       	andi	r24, 0xDF	; 223
    17d8:	80 83       	st	Z, r24
	}
}
    17da:	ff 91       	pop	r31
    17dc:	ef 91       	pop	r30
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	2f 91       	pop	r18
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	cf 93       	push	r28
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1812:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
    1816:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <do_echo>
    181a:	88 23       	and	r24, r24
    181c:	49 f0       	breq	.+18     	; 0x1830 <__vector_20+0x42>
    181e:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_out_buffer>
    1822:	8f 3f       	cpi	r24, 0xFF	; 255
    1824:	29 f0       	breq	.+10     	; 0x1830 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	8c 2f       	mov	r24, r28
    182c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
    1830:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <bytes_in_input_buffer>
    1834:	80 31       	cpi	r24, 0x10	; 16
    1836:	20 f0       	brcs	.+8      	; 0x1840 <__vector_20+0x52>
	{
		input_overrun = 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <input_overrun>
    183e:	18 c0       	rjmp	.+48     	; 0x1870 <__vector_20+0x82>
	} else
	{
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r')
    1840:	cd 30       	cpi	r28, 0x0D	; 13
    1842:	09 f4       	brne	.+2      	; 0x1846 <__vector_20+0x58>
		{
			c = '\n';
    1844:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1846:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <input_insert_pos>
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	8e 0f       	add	r24, r30
    184e:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <input_insert_pos>
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	e0 5a       	subi	r30, 0xA0	; 160
    1856:	fb 4f       	sbci	r31, 0xFB	; 251
    1858:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    185a:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <bytes_in_input_buffer>
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
    1864:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <input_insert_pos>
    1868:	80 31       	cpi	r24, 0x10	; 16
    186a:	11 f4       	brne	.+4      	; 0x1870 <__vector_20+0x82>
		{
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    186c:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <input_insert_pos>
		}
	}
}
    1870:	ff 91       	pop	r31
    1872:	ef 91       	pop	r30
    1874:	cf 91       	pop	r28
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	7f 91       	pop	r23
    1880:	6f 91       	pop	r22
    1882:	5f 91       	pop	r21
    1884:	4f 91       	pop	r20
    1886:	3f 91       	pop	r19
    1888:	2f 91       	pop	r18
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider)
{
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    1894:	94 b1       	in	r25, 0x04	; 4
    1896:	90 6b       	ori	r25, 0xB0	; 176
    1898:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    189a:	95 b1       	in	r25, 0x05	; 5
    189c:	90 61       	ori	r25, 0x10	; 16
    189e:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    18a0:	90 e5       	ldi	r25, 0x50	; 80
    18a2:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider)
    18a4:	88 30       	cpi	r24, 0x08	; 8
    18a6:	21 f0       	breq	.+8      	; 0x18b0 <spi_setup_master+0x1c>
    18a8:	80 32       	cpi	r24, 0x20	; 32
    18aa:	11 f0       	breq	.+4      	; 0x18b0 <spi_setup_master+0x1c>
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	19 f4       	brne	.+6      	; 0x18b6 <spi_setup_master+0x22>
	{
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    18b0:	91 e0       	ldi	r25, 0x01	; 1
    18b2:	9d bd       	out	0x2d, r25	; 45
			break;
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    18b6:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
    18b8:	80 32       	cpi	r24, 0x20	; 32
    18ba:	69 f0       	breq	.+26     	; 0x18d6 <spi_setup_master+0x42>
    18bc:	28 f4       	brcc	.+10     	; 0x18c8 <spi_setup_master+0x34>
    18be:	88 30       	cpi	r24, 0x08	; 8
    18c0:	71 f0       	breq	.+28     	; 0x18de <spi_setup_master+0x4a>
    18c2:	80 31       	cpi	r24, 0x10	; 16
    18c4:	61 f0       	breq	.+24     	; 0x18de <spi_setup_master+0x4a>
    18c6:	0e c0       	rjmp	.+28     	; 0x18e4 <spi_setup_master+0x50>
    18c8:	80 34       	cpi	r24, 0x40	; 64
    18ca:	29 f0       	breq	.+10     	; 0x18d6 <spi_setup_master+0x42>
    18cc:	80 38       	cpi	r24, 0x80	; 128
    18ce:	51 f4       	brne	.+20     	; 0x18e4 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
    18d0:	8c b5       	in	r24, 0x2c	; 44
    18d2:	81 60       	ori	r24, 0x01	; 1
    18d4:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    18d6:	8c b5       	in	r24, 0x2c	; 44
    18d8:	82 60       	ori	r24, 0x02	; 2
    18da:	8c bd       	out	0x2c, r24	; 44
			break;
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    18de:	8c b5       	in	r24, 0x2c	; 44
    18e0:	81 60       	ori	r24, 0x01	; 1
    18e2:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    18e4:	85 b1       	in	r24, 0x05	; 5
    18e6:	8f 7e       	andi	r24, 0xEF	; 239
    18e8:	85 b9       	out	0x05, r24	; 5
    18ea:	08 95       	ret

000018ec <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    18ec:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
    18ee:	0d b4       	in	r0, 0x2d	; 45
    18f0:	07 fe       	sbrs	r0, 7
    18f2:	fd cf       	rjmp	.-6      	; 0x18ee <spi_send_byte+0x2>
	{
		; // wait
	}
	return SPDR0;
    18f4:	8e b5       	in	r24, 0x2e	; 46
}
    18f6:	08 95       	ret

000018f8 <move_terminal_cursor>:
}

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
}
    18f8:	9f 93       	push	r25
    18fa:	8f 93       	push	r24
    18fc:	7f 93       	push	r23
    18fe:	6f 93       	push	r22
    1900:	8a e6       	ldi	r24, 0x6A	; 106
    1902:	94 e0       	ldi	r25, 0x04	; 4
    1904:	9f 93       	push	r25
    1906:	8f 93       	push	r24
    1908:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	08 95       	ret

0000191a <clear_terminal>:
    191a:	85 e6       	ldi	r24, 0x65	; 101
    191c:	94 e0       	ldi	r25, 0x04	; 4
    191e:	9f 93       	push	r25
    1920:	8f 93       	push	r24
    1922:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	08 95       	ret

0000192c <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
    192c:	1f 92       	push	r1
    192e:	8f 93       	push	r24
    1930:	8f e5       	ldi	r24, 0x5F	; 95
    1932:	94 e0       	ldi	r25, 0x04	; 4
    1934:	9f 93       	push	r25
    1936:	8f 93       	push	r24
    1938:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	08 95       	ret

00001946 <hide_cursor>:

void hide_cursor()
{
	printf_P(PSTR("\x1b[?25l"));
    1946:	88 e5       	ldi	r24, 0x58	; 88
    1948:	94 e0       	ldi	r25, 0x04	; 4
    194a:	9f 93       	push	r25
    194c:	8f 93       	push	r24
    194e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	08 95       	ret

00001958 <init_timer0>:
void init_timer0(void)
{
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    1958:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <clock_ticks_ms>
    195c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <clock_ticks_ms+0x1>
    1960:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <clock_ticks_ms+0x2>
    1964:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1968:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    196a:	8c e7       	ldi	r24, 0x7C	; 124
    196c:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    196e:	92 e0       	ldi	r25, 0x02	; 2
    1970:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    1972:	83 e0       	ldi	r24, 0x03	; 3
    1974:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    1976:	ee e6       	ldi	r30, 0x6E	; 110
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	82 60       	ori	r24, 0x02	; 2
    197e:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    1980:	95 bb       	out	0x15, r25	; 21
    1982:	08 95       	ret

00001984 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    1984:	8f b7       	in	r24, 0x3f	; 63
    1986:	28 2f       	mov	r18, r24
    1988:	20 78       	andi	r18, 0x80	; 128
	cli();
    198a:	f8 94       	cli
	return_value = clock_ticks_ms;
    198c:	60 91 d7 02 	lds	r22, 0x02D7	; 0x8002d7 <clock_ticks_ms>
    1990:	70 91 d8 02 	lds	r23, 0x02D8	; 0x8002d8 <clock_ticks_ms+0x1>
    1994:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <clock_ticks_ms+0x2>
    1998:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    199c:	22 23       	and	r18, r18
    199e:	09 f0       	breq	.+2      	; 0x19a2 <get_current_time+0x1e>
	{
		sei();
    19a0:	78 94       	sei
	}
	return return_value;
}
    19a2:	08 95       	ret

000019a4 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    19a4:	1f 92       	push	r1
    19a6:	0f 92       	push	r0
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	0f 92       	push	r0
    19ac:	11 24       	eor	r1, r1
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	af 93       	push	r26
    19b4:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    19b6:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <clock_ticks_ms>
    19ba:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <clock_ticks_ms+0x1>
    19be:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <clock_ticks_ms+0x2>
    19c2:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <clock_ticks_ms+0x3>
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	a1 1d       	adc	r26, r1
    19ca:	b1 1d       	adc	r27, r1
    19cc:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <clock_ticks_ms>
    19d0:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <clock_ticks_ms+0x1>
    19d4:	a0 93 d9 02 	sts	0x02D9, r26	; 0x8002d9 <clock_ticks_ms+0x2>
    19d8:	b0 93 da 02 	sts	0x02DA, r27	; 0x8002da <clock_ticks_ms+0x3>
}
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	0f 90       	pop	r0
    19ea:	1f 90       	pop	r1
    19ec:	18 95       	reti

000019ee <init_timer1>:

/* Set up timer 1
 */
void init_timer1(void)
{
	TCNT1 = 0;
    19ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    19f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    19f6:	08 95       	ret

000019f8 <init_timer2>:

/* Set up timer 2
 */
void init_timer2(void)
{
	TCNT2 = 0;
    19f8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    19fc:	08 95       	ret

000019fe <__divmodhi4>:
    19fe:	97 fb       	bst	r25, 7
    1a00:	07 2e       	mov	r0, r23
    1a02:	16 f4       	brtc	.+4      	; 0x1a08 <__divmodhi4+0xa>
    1a04:	00 94       	com	r0
    1a06:	07 d0       	rcall	.+14     	; 0x1a16 <__divmodhi4_neg1>
    1a08:	77 fd       	sbrc	r23, 7
    1a0a:	09 d0       	rcall	.+18     	; 0x1a1e <__divmodhi4_neg2>
    1a0c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__udivmodhi4>
    1a10:	07 fc       	sbrc	r0, 7
    1a12:	05 d0       	rcall	.+10     	; 0x1a1e <__divmodhi4_neg2>
    1a14:	3e f4       	brtc	.+14     	; 0x1a24 <__divmodhi4_exit>

00001a16 <__divmodhi4_neg1>:
    1a16:	90 95       	com	r25
    1a18:	81 95       	neg	r24
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	08 95       	ret

00001a1e <__divmodhi4_neg2>:
    1a1e:	70 95       	com	r23
    1a20:	61 95       	neg	r22
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255

00001a24 <__divmodhi4_exit>:
    1a24:	08 95       	ret

00001a26 <__divmodsi4>:
    1a26:	05 2e       	mov	r0, r21
    1a28:	97 fb       	bst	r25, 7
    1a2a:	1e f4       	brtc	.+6      	; 0x1a32 <__divmodsi4+0xc>
    1a2c:	00 94       	com	r0
    1a2e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__negsi2>
    1a32:	57 fd       	sbrc	r21, 7
    1a34:	07 d0       	rcall	.+14     	; 0x1a44 <__divmodsi4_neg2>
    1a36:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__udivmodsi4>
    1a3a:	07 fc       	sbrc	r0, 7
    1a3c:	03 d0       	rcall	.+6      	; 0x1a44 <__divmodsi4_neg2>
    1a3e:	4e f4       	brtc	.+18     	; 0x1a52 <__divmodsi4_exit>
    1a40:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__negsi2>

00001a44 <__divmodsi4_neg2>:
    1a44:	50 95       	com	r21
    1a46:	40 95       	com	r20
    1a48:	30 95       	com	r19
    1a4a:	21 95       	neg	r18
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a50:	5f 4f       	sbci	r21, 0xFF	; 255

00001a52 <__divmodsi4_exit>:
    1a52:	08 95       	ret

00001a54 <__negsi2>:
    1a54:	90 95       	com	r25
    1a56:	80 95       	com	r24
    1a58:	70 95       	com	r23
    1a5a:	61 95       	neg	r22
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	08 95       	ret

00001a64 <__udivmodhi4>:
    1a64:	aa 1b       	sub	r26, r26
    1a66:	bb 1b       	sub	r27, r27
    1a68:	51 e1       	ldi	r21, 0x11	; 17
    1a6a:	07 c0       	rjmp	.+14     	; 0x1a7a <__udivmodhi4_ep>

00001a6c <__udivmodhi4_loop>:
    1a6c:	aa 1f       	adc	r26, r26
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	a6 17       	cp	r26, r22
    1a72:	b7 07       	cpc	r27, r23
    1a74:	10 f0       	brcs	.+4      	; 0x1a7a <__udivmodhi4_ep>
    1a76:	a6 1b       	sub	r26, r22
    1a78:	b7 0b       	sbc	r27, r23

00001a7a <__udivmodhi4_ep>:
    1a7a:	88 1f       	adc	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	5a 95       	dec	r21
    1a80:	a9 f7       	brne	.-22     	; 0x1a6c <__udivmodhi4_loop>
    1a82:	80 95       	com	r24
    1a84:	90 95       	com	r25
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	08 95       	ret

00001a8c <__udivmodsi4>:
    1a8c:	a1 e2       	ldi	r26, 0x21	; 33
    1a8e:	1a 2e       	mov	r1, r26
    1a90:	aa 1b       	sub	r26, r26
    1a92:	bb 1b       	sub	r27, r27
    1a94:	fd 01       	movw	r30, r26
    1a96:	0d c0       	rjmp	.+26     	; 0x1ab2 <__udivmodsi4_ep>

00001a98 <__udivmodsi4_loop>:
    1a98:	aa 1f       	adc	r26, r26
    1a9a:	bb 1f       	adc	r27, r27
    1a9c:	ee 1f       	adc	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	a2 17       	cp	r26, r18
    1aa2:	b3 07       	cpc	r27, r19
    1aa4:	e4 07       	cpc	r30, r20
    1aa6:	f5 07       	cpc	r31, r21
    1aa8:	20 f0       	brcs	.+8      	; 0x1ab2 <__udivmodsi4_ep>
    1aaa:	a2 1b       	sub	r26, r18
    1aac:	b3 0b       	sbc	r27, r19
    1aae:	e4 0b       	sbc	r30, r20
    1ab0:	f5 0b       	sbc	r31, r21

00001ab2 <__udivmodsi4_ep>:
    1ab2:	66 1f       	adc	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	1a 94       	dec	r1
    1abc:	69 f7       	brne	.-38     	; 0x1a98 <__udivmodsi4_loop>
    1abe:	60 95       	com	r22
    1ac0:	70 95       	com	r23
    1ac2:	80 95       	com	r24
    1ac4:	90 95       	com	r25
    1ac6:	9b 01       	movw	r18, r22
    1ac8:	ac 01       	movw	r20, r24
    1aca:	bd 01       	movw	r22, r26
    1acc:	cf 01       	movw	r24, r30
    1ace:	08 95       	ret

00001ad0 <fgetc>:
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	ec 01       	movw	r28, r24
    1ad6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad8:	20 ff       	sbrs	r18, 0
    1ada:	33 c0       	rjmp	.+102    	; 0x1b42 <fgetc+0x72>
    1adc:	26 ff       	sbrs	r18, 6
    1ade:	0a c0       	rjmp	.+20     	; 0x1af4 <fgetc+0x24>
    1ae0:	2f 7b       	andi	r18, 0xBF	; 191
    1ae2:	2b 83       	std	Y+3, r18	; 0x03
    1ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	9f 83       	std	Y+7, r25	; 0x07
    1aec:	8e 83       	std	Y+6, r24	; 0x06
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	29 c0       	rjmp	.+82     	; 0x1b46 <fgetc+0x76>
    1af4:	22 ff       	sbrs	r18, 2
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <fgetc+0x46>
    1af8:	e8 81       	ld	r30, Y
    1afa:	f9 81       	ldd	r31, Y+1	; 0x01
    1afc:	80 81       	ld	r24, Z
    1afe:	08 2e       	mov	r0, r24
    1b00:	00 0c       	add	r0, r0
    1b02:	99 0b       	sbc	r25, r25
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	19 f4       	brne	.+6      	; 0x1b0e <fgetc+0x3e>
    1b08:	20 62       	ori	r18, 0x20	; 32
    1b0a:	2b 83       	std	Y+3, r18	; 0x03
    1b0c:	1a c0       	rjmp	.+52     	; 0x1b42 <fgetc+0x72>
    1b0e:	31 96       	adiw	r30, 0x01	; 1
    1b10:	f9 83       	std	Y+1, r31	; 0x01
    1b12:	e8 83       	st	Y, r30
    1b14:	0e c0       	rjmp	.+28     	; 0x1b32 <fgetc+0x62>
    1b16:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b18:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b1a:	09 95       	icall
    1b1c:	97 ff       	sbrs	r25, 7
    1b1e:	09 c0       	rjmp	.+18     	; 0x1b32 <fgetc+0x62>
    1b20:	2b 81       	ldd	r18, Y+3	; 0x03
    1b22:	01 96       	adiw	r24, 0x01	; 1
    1b24:	11 f0       	breq	.+4      	; 0x1b2a <fgetc+0x5a>
    1b26:	80 e2       	ldi	r24, 0x20	; 32
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <fgetc+0x5c>
    1b2a:	80 e1       	ldi	r24, 0x10	; 16
    1b2c:	82 2b       	or	r24, r18
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <fgetc+0x72>
    1b32:	2e 81       	ldd	r18, Y+6	; 0x06
    1b34:	3f 81       	ldd	r19, Y+7	; 0x07
    1b36:	2f 5f       	subi	r18, 0xFF	; 255
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	3f 83       	std	Y+7, r19	; 0x07
    1b3c:	2e 83       	std	Y+6, r18	; 0x06
    1b3e:	99 27       	eor	r25, r25
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <fgetc+0x76>
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	9f ef       	ldi	r25, 0xFF	; 255
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <printf>:
    1b4c:	a0 e0       	ldi	r26, 0x00	; 0
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	ec ea       	ldi	r30, 0xAC	; 172
    1b52:	fd e0       	ldi	r31, 0x0D	; 13
    1b54:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__prologue_saves__+0x20>
    1b58:	ae 01       	movw	r20, r28
    1b5a:	4b 5f       	subi	r20, 0xFB	; 251
    1b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5e:	fa 01       	movw	r30, r20
    1b60:	61 91       	ld	r22, Z+
    1b62:	71 91       	ld	r23, Z+
    1b64:	af 01       	movw	r20, r30
    1b66:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <__iob+0x2>
    1b6a:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <__iob+0x3>
    1b6e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <vfprintf>
    1b72:	e2 e0       	ldi	r30, 0x02	; 2
    1b74:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__epilogue_restores__+0x20>

00001b78 <printf_P>:
    1b78:	a0 e0       	ldi	r26, 0x00	; 0
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e2 ec       	ldi	r30, 0xC2	; 194
    1b7e:	fd e0       	ldi	r31, 0x0D	; 13
    1b80:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x1c>
    1b84:	ae 01       	movw	r20, r28
    1b86:	49 5f       	subi	r20, 0xF9	; 249
    1b88:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8a:	da 01       	movw	r26, r20
    1b8c:	6d 91       	ld	r22, X+
    1b8e:	7d 91       	ld	r23, X+
    1b90:	ad 01       	movw	r20, r26
    1b92:	02 e7       	ldi	r16, 0x72	; 114
    1b94:	14 e0       	ldi	r17, 0x04	; 4
    1b96:	f8 01       	movw	r30, r16
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	13 96       	adiw	r26, 0x03	; 3
    1ba0:	2c 91       	ld	r18, X
    1ba2:	13 97       	sbiw	r26, 0x03	; 3
    1ba4:	28 60       	ori	r18, 0x08	; 8
    1ba6:	13 96       	adiw	r26, 0x03	; 3
    1ba8:	2c 93       	st	X, r18
    1baa:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <vfprintf>
    1bae:	d8 01       	movw	r26, r16
    1bb0:	12 96       	adiw	r26, 0x02	; 2
    1bb2:	ed 91       	ld	r30, X+
    1bb4:	fc 91       	ld	r31, X
    1bb6:	13 97       	sbiw	r26, 0x03	; 3
    1bb8:	23 81       	ldd	r18, Z+3	; 0x03
    1bba:	27 7f       	andi	r18, 0xF7	; 247
    1bbc:	23 83       	std	Z+3, r18	; 0x03
    1bbe:	e4 e0       	ldi	r30, 0x04	; 4
    1bc0:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x1c>

00001bc4 <puts>:
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <__iob+0x2>
    1bd0:	f0 91 75 04 	lds	r31, 0x0475	; 0x800475 <__iob+0x3>
    1bd4:	23 81       	ldd	r18, Z+3	; 0x03
    1bd6:	21 ff       	sbrs	r18, 1
    1bd8:	1b c0       	rjmp	.+54     	; 0x1c10 <puts+0x4c>
    1bda:	8c 01       	movw	r16, r24
    1bdc:	d0 e0       	ldi	r29, 0x00	; 0
    1bde:	c0 e0       	ldi	r28, 0x00	; 0
    1be0:	f8 01       	movw	r30, r16
    1be2:	81 91       	ld	r24, Z+
    1be4:	8f 01       	movw	r16, r30
    1be6:	60 91 74 04 	lds	r22, 0x0474	; 0x800474 <__iob+0x2>
    1bea:	70 91 75 04 	lds	r23, 0x0475	; 0x800475 <__iob+0x3>
    1bee:	db 01       	movw	r26, r22
    1bf0:	18 96       	adiw	r26, 0x08	; 8
    1bf2:	ed 91       	ld	r30, X+
    1bf4:	fc 91       	ld	r31, X
    1bf6:	19 97       	sbiw	r26, 0x09	; 9
    1bf8:	88 23       	and	r24, r24
    1bfa:	31 f0       	breq	.+12     	; 0x1c08 <puts+0x44>
    1bfc:	09 95       	icall
    1bfe:	89 2b       	or	r24, r25
    1c00:	79 f3       	breq	.-34     	; 0x1be0 <puts+0x1c>
    1c02:	df ef       	ldi	r29, 0xFF	; 255
    1c04:	cf ef       	ldi	r28, 0xFF	; 255
    1c06:	ec cf       	rjmp	.-40     	; 0x1be0 <puts+0x1c>
    1c08:	8a e0       	ldi	r24, 0x0A	; 10
    1c0a:	09 95       	icall
    1c0c:	89 2b       	or	r24, r25
    1c0e:	19 f0       	breq	.+6      	; 0x1c16 <puts+0x52>
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	9f ef       	ldi	r25, 0xFF	; 255
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <puts+0x56>
    1c16:	8d 2f       	mov	r24, r29
    1c18:	9c 2f       	mov	r25, r28
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	0f 91       	pop	r16
    1c22:	08 95       	ret

00001c24 <sprintf>:
    1c24:	ae e0       	ldi	r26, 0x0E	; 14
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e1       	ldi	r30, 0x18	; 24
    1c2a:	fe e0       	ldi	r31, 0x0E	; 14
    1c2c:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x1c>
    1c30:	0d 89       	ldd	r16, Y+21	; 0x15
    1c32:	1e 89       	ldd	r17, Y+22	; 0x16
    1c34:	86 e0       	ldi	r24, 0x06	; 6
    1c36:	8c 83       	std	Y+4, r24	; 0x04
    1c38:	1a 83       	std	Y+2, r17	; 0x02
    1c3a:	09 83       	std	Y+1, r16	; 0x01
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	9f e7       	ldi	r25, 0x7F	; 127
    1c40:	9e 83       	std	Y+6, r25	; 0x06
    1c42:	8d 83       	std	Y+5, r24	; 0x05
    1c44:	ae 01       	movw	r20, r28
    1c46:	47 5e       	subi	r20, 0xE7	; 231
    1c48:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4a:	6f 89       	ldd	r22, Y+23	; 0x17
    1c4c:	78 8d       	ldd	r23, Y+24	; 0x18
    1c4e:	ce 01       	movw	r24, r28
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <vfprintf>
    1c56:	ef 81       	ldd	r30, Y+7	; 0x07
    1c58:	f8 85       	ldd	r31, Y+8	; 0x08
    1c5a:	e0 0f       	add	r30, r16
    1c5c:	f1 1f       	adc	r31, r17
    1c5e:	10 82       	st	Z, r1
    1c60:	2e 96       	adiw	r28, 0x0e	; 14
    1c62:	e4 e0       	ldi	r30, 0x04	; 4
    1c64:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x1c>

00001c68 <vfprintf>:
    1c68:	ab e0       	ldi	r26, 0x0B	; 11
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	ea e3       	ldi	r30, 0x3A	; 58
    1c6e:	fe e0       	ldi	r31, 0x0E	; 14
    1c70:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__prologue_saves__>
    1c74:	6c 01       	movw	r12, r24
    1c76:	7b 01       	movw	r14, r22
    1c78:	8a 01       	movw	r16, r20
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	17 82       	std	Z+7, r1	; 0x07
    1c7e:	16 82       	std	Z+6, r1	; 0x06
    1c80:	83 81       	ldd	r24, Z+3	; 0x03
    1c82:	81 ff       	sbrs	r24, 1
    1c84:	cc c1       	rjmp	.+920    	; 0x201e <vfprintf+0x3b6>
    1c86:	ce 01       	movw	r24, r28
    1c88:	01 96       	adiw	r24, 0x01	; 1
    1c8a:	3c 01       	movw	r6, r24
    1c8c:	f6 01       	movw	r30, r12
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	f7 01       	movw	r30, r14
    1c92:	93 fd       	sbrc	r25, 3
    1c94:	85 91       	lpm	r24, Z+
    1c96:	93 ff       	sbrs	r25, 3
    1c98:	81 91       	ld	r24, Z+
    1c9a:	7f 01       	movw	r14, r30
    1c9c:	88 23       	and	r24, r24
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <vfprintf+0x3a>
    1ca0:	ba c1       	rjmp	.+884    	; 0x2016 <vfprintf+0x3ae>
    1ca2:	85 32       	cpi	r24, 0x25	; 37
    1ca4:	39 f4       	brne	.+14     	; 0x1cb4 <vfprintf+0x4c>
    1ca6:	93 fd       	sbrc	r25, 3
    1ca8:	85 91       	lpm	r24, Z+
    1caa:	93 ff       	sbrs	r25, 3
    1cac:	81 91       	ld	r24, Z+
    1cae:	7f 01       	movw	r14, r30
    1cb0:	85 32       	cpi	r24, 0x25	; 37
    1cb2:	29 f4       	brne	.+10     	; 0x1cbe <vfprintf+0x56>
    1cb4:	b6 01       	movw	r22, r12
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1cbc:	e7 cf       	rjmp	.-50     	; 0x1c8c <vfprintf+0x24>
    1cbe:	91 2c       	mov	r9, r1
    1cc0:	21 2c       	mov	r2, r1
    1cc2:	31 2c       	mov	r3, r1
    1cc4:	ff e1       	ldi	r31, 0x1F	; 31
    1cc6:	f3 15       	cp	r31, r3
    1cc8:	d8 f0       	brcs	.+54     	; 0x1d00 <vfprintf+0x98>
    1cca:	8b 32       	cpi	r24, 0x2B	; 43
    1ccc:	79 f0       	breq	.+30     	; 0x1cec <vfprintf+0x84>
    1cce:	38 f4       	brcc	.+14     	; 0x1cde <vfprintf+0x76>
    1cd0:	80 32       	cpi	r24, 0x20	; 32
    1cd2:	79 f0       	breq	.+30     	; 0x1cf2 <vfprintf+0x8a>
    1cd4:	83 32       	cpi	r24, 0x23	; 35
    1cd6:	a1 f4       	brne	.+40     	; 0x1d00 <vfprintf+0x98>
    1cd8:	23 2d       	mov	r18, r3
    1cda:	20 61       	ori	r18, 0x10	; 16
    1cdc:	1d c0       	rjmp	.+58     	; 0x1d18 <vfprintf+0xb0>
    1cde:	8d 32       	cpi	r24, 0x2D	; 45
    1ce0:	61 f0       	breq	.+24     	; 0x1cfa <vfprintf+0x92>
    1ce2:	80 33       	cpi	r24, 0x30	; 48
    1ce4:	69 f4       	brne	.+26     	; 0x1d00 <vfprintf+0x98>
    1ce6:	23 2d       	mov	r18, r3
    1ce8:	21 60       	ori	r18, 0x01	; 1
    1cea:	16 c0       	rjmp	.+44     	; 0x1d18 <vfprintf+0xb0>
    1cec:	83 2d       	mov	r24, r3
    1cee:	82 60       	ori	r24, 0x02	; 2
    1cf0:	38 2e       	mov	r3, r24
    1cf2:	e3 2d       	mov	r30, r3
    1cf4:	e4 60       	ori	r30, 0x04	; 4
    1cf6:	3e 2e       	mov	r3, r30
    1cf8:	2a c0       	rjmp	.+84     	; 0x1d4e <vfprintf+0xe6>
    1cfa:	f3 2d       	mov	r31, r3
    1cfc:	f8 60       	ori	r31, 0x08	; 8
    1cfe:	1d c0       	rjmp	.+58     	; 0x1d3a <vfprintf+0xd2>
    1d00:	37 fc       	sbrc	r3, 7
    1d02:	2d c0       	rjmp	.+90     	; 0x1d5e <vfprintf+0xf6>
    1d04:	20 ed       	ldi	r18, 0xD0	; 208
    1d06:	28 0f       	add	r18, r24
    1d08:	2a 30       	cpi	r18, 0x0A	; 10
    1d0a:	40 f0       	brcs	.+16     	; 0x1d1c <vfprintf+0xb4>
    1d0c:	8e 32       	cpi	r24, 0x2E	; 46
    1d0e:	b9 f4       	brne	.+46     	; 0x1d3e <vfprintf+0xd6>
    1d10:	36 fc       	sbrc	r3, 6
    1d12:	81 c1       	rjmp	.+770    	; 0x2016 <vfprintf+0x3ae>
    1d14:	23 2d       	mov	r18, r3
    1d16:	20 64       	ori	r18, 0x40	; 64
    1d18:	32 2e       	mov	r3, r18
    1d1a:	19 c0       	rjmp	.+50     	; 0x1d4e <vfprintf+0xe6>
    1d1c:	36 fe       	sbrs	r3, 6
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <vfprintf+0xc4>
    1d20:	8a e0       	ldi	r24, 0x0A	; 10
    1d22:	98 9e       	mul	r9, r24
    1d24:	20 0d       	add	r18, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	92 2e       	mov	r9, r18
    1d2a:	11 c0       	rjmp	.+34     	; 0x1d4e <vfprintf+0xe6>
    1d2c:	ea e0       	ldi	r30, 0x0A	; 10
    1d2e:	2e 9e       	mul	r2, r30
    1d30:	20 0d       	add	r18, r0
    1d32:	11 24       	eor	r1, r1
    1d34:	22 2e       	mov	r2, r18
    1d36:	f3 2d       	mov	r31, r3
    1d38:	f0 62       	ori	r31, 0x20	; 32
    1d3a:	3f 2e       	mov	r3, r31
    1d3c:	08 c0       	rjmp	.+16     	; 0x1d4e <vfprintf+0xe6>
    1d3e:	8c 36       	cpi	r24, 0x6C	; 108
    1d40:	21 f4       	brne	.+8      	; 0x1d4a <vfprintf+0xe2>
    1d42:	83 2d       	mov	r24, r3
    1d44:	80 68       	ori	r24, 0x80	; 128
    1d46:	38 2e       	mov	r3, r24
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <vfprintf+0xe6>
    1d4a:	88 36       	cpi	r24, 0x68	; 104
    1d4c:	41 f4       	brne	.+16     	; 0x1d5e <vfprintf+0xf6>
    1d4e:	f7 01       	movw	r30, r14
    1d50:	93 fd       	sbrc	r25, 3
    1d52:	85 91       	lpm	r24, Z+
    1d54:	93 ff       	sbrs	r25, 3
    1d56:	81 91       	ld	r24, Z+
    1d58:	7f 01       	movw	r14, r30
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	b3 cf       	rjmp	.-154    	; 0x1cc4 <vfprintf+0x5c>
    1d5e:	98 2f       	mov	r25, r24
    1d60:	9f 7d       	andi	r25, 0xDF	; 223
    1d62:	95 54       	subi	r25, 0x45	; 69
    1d64:	93 30       	cpi	r25, 0x03	; 3
    1d66:	28 f4       	brcc	.+10     	; 0x1d72 <vfprintf+0x10a>
    1d68:	0c 5f       	subi	r16, 0xFC	; 252
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	9f e3       	ldi	r25, 0x3F	; 63
    1d6e:	99 83       	std	Y+1, r25	; 0x01
    1d70:	0d c0       	rjmp	.+26     	; 0x1d8c <vfprintf+0x124>
    1d72:	83 36       	cpi	r24, 0x63	; 99
    1d74:	31 f0       	breq	.+12     	; 0x1d82 <vfprintf+0x11a>
    1d76:	83 37       	cpi	r24, 0x73	; 115
    1d78:	71 f0       	breq	.+28     	; 0x1d96 <vfprintf+0x12e>
    1d7a:	83 35       	cpi	r24, 0x53	; 83
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <vfprintf+0x118>
    1d7e:	59 c0       	rjmp	.+178    	; 0x1e32 <vfprintf+0x1ca>
    1d80:	21 c0       	rjmp	.+66     	; 0x1dc4 <vfprintf+0x15c>
    1d82:	f8 01       	movw	r30, r16
    1d84:	80 81       	ld	r24, Z
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	0e 5f       	subi	r16, 0xFE	; 254
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	88 24       	eor	r8, r8
    1d8e:	83 94       	inc	r8
    1d90:	91 2c       	mov	r9, r1
    1d92:	53 01       	movw	r10, r6
    1d94:	13 c0       	rjmp	.+38     	; 0x1dbc <vfprintf+0x154>
    1d96:	28 01       	movw	r4, r16
    1d98:	f2 e0       	ldi	r31, 0x02	; 2
    1d9a:	4f 0e       	add	r4, r31
    1d9c:	51 1c       	adc	r5, r1
    1d9e:	f8 01       	movw	r30, r16
    1da0:	a0 80       	ld	r10, Z
    1da2:	b1 80       	ldd	r11, Z+1	; 0x01
    1da4:	36 fe       	sbrs	r3, 6
    1da6:	03 c0       	rjmp	.+6      	; 0x1dae <vfprintf+0x146>
    1da8:	69 2d       	mov	r22, r9
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <vfprintf+0x14a>
    1dae:	6f ef       	ldi	r22, 0xFF	; 255
    1db0:	7f ef       	ldi	r23, 0xFF	; 255
    1db2:	c5 01       	movw	r24, r10
    1db4:	0e 94 20 10 	call	0x2040	; 0x2040 <strnlen>
    1db8:	4c 01       	movw	r8, r24
    1dba:	82 01       	movw	r16, r4
    1dbc:	f3 2d       	mov	r31, r3
    1dbe:	ff 77       	andi	r31, 0x7F	; 127
    1dc0:	3f 2e       	mov	r3, r31
    1dc2:	16 c0       	rjmp	.+44     	; 0x1df0 <vfprintf+0x188>
    1dc4:	28 01       	movw	r4, r16
    1dc6:	22 e0       	ldi	r18, 0x02	; 2
    1dc8:	42 0e       	add	r4, r18
    1dca:	51 1c       	adc	r5, r1
    1dcc:	f8 01       	movw	r30, r16
    1dce:	a0 80       	ld	r10, Z
    1dd0:	b1 80       	ldd	r11, Z+1	; 0x01
    1dd2:	36 fe       	sbrs	r3, 6
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <vfprintf+0x174>
    1dd6:	69 2d       	mov	r22, r9
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <vfprintf+0x178>
    1ddc:	6f ef       	ldi	r22, 0xFF	; 255
    1dde:	7f ef       	ldi	r23, 0xFF	; 255
    1de0:	c5 01       	movw	r24, r10
    1de2:	0e 94 15 10 	call	0x202a	; 0x202a <strnlen_P>
    1de6:	4c 01       	movw	r8, r24
    1de8:	f3 2d       	mov	r31, r3
    1dea:	f0 68       	ori	r31, 0x80	; 128
    1dec:	3f 2e       	mov	r3, r31
    1dee:	82 01       	movw	r16, r4
    1df0:	33 fc       	sbrc	r3, 3
    1df2:	1b c0       	rjmp	.+54     	; 0x1e2a <vfprintf+0x1c2>
    1df4:	82 2d       	mov	r24, r2
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	88 16       	cp	r8, r24
    1dfa:	99 06       	cpc	r9, r25
    1dfc:	b0 f4       	brcc	.+44     	; 0x1e2a <vfprintf+0x1c2>
    1dfe:	b6 01       	movw	r22, r12
    1e00:	80 e2       	ldi	r24, 0x20	; 32
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1e08:	2a 94       	dec	r2
    1e0a:	f4 cf       	rjmp	.-24     	; 0x1df4 <vfprintf+0x18c>
    1e0c:	f5 01       	movw	r30, r10
    1e0e:	37 fc       	sbrc	r3, 7
    1e10:	85 91       	lpm	r24, Z+
    1e12:	37 fe       	sbrs	r3, 7
    1e14:	81 91       	ld	r24, Z+
    1e16:	5f 01       	movw	r10, r30
    1e18:	b6 01       	movw	r22, r12
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1e20:	21 10       	cpse	r2, r1
    1e22:	2a 94       	dec	r2
    1e24:	21 e0       	ldi	r18, 0x01	; 1
    1e26:	82 1a       	sub	r8, r18
    1e28:	91 08       	sbc	r9, r1
    1e2a:	81 14       	cp	r8, r1
    1e2c:	91 04       	cpc	r9, r1
    1e2e:	71 f7       	brne	.-36     	; 0x1e0c <vfprintf+0x1a4>
    1e30:	e8 c0       	rjmp	.+464    	; 0x2002 <vfprintf+0x39a>
    1e32:	84 36       	cpi	r24, 0x64	; 100
    1e34:	11 f0       	breq	.+4      	; 0x1e3a <vfprintf+0x1d2>
    1e36:	89 36       	cpi	r24, 0x69	; 105
    1e38:	41 f5       	brne	.+80     	; 0x1e8a <vfprintf+0x222>
    1e3a:	f8 01       	movw	r30, r16
    1e3c:	37 fe       	sbrs	r3, 7
    1e3e:	07 c0       	rjmp	.+14     	; 0x1e4e <vfprintf+0x1e6>
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	0c 5f       	subi	r16, 0xFC	; 252
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	08 c0       	rjmp	.+16     	; 0x1e5e <vfprintf+0x1f6>
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	07 2e       	mov	r0, r23
    1e54:	00 0c       	add	r0, r0
    1e56:	88 0b       	sbc	r24, r24
    1e58:	99 0b       	sbc	r25, r25
    1e5a:	0e 5f       	subi	r16, 0xFE	; 254
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	f3 2d       	mov	r31, r3
    1e60:	ff 76       	andi	r31, 0x6F	; 111
    1e62:	3f 2e       	mov	r3, r31
    1e64:	97 ff       	sbrs	r25, 7
    1e66:	09 c0       	rjmp	.+18     	; 0x1e7a <vfprintf+0x212>
    1e68:	90 95       	com	r25
    1e6a:	80 95       	com	r24
    1e6c:	70 95       	com	r23
    1e6e:	61 95       	neg	r22
    1e70:	7f 4f       	sbci	r23, 0xFF	; 255
    1e72:	8f 4f       	sbci	r24, 0xFF	; 255
    1e74:	9f 4f       	sbci	r25, 0xFF	; 255
    1e76:	f0 68       	ori	r31, 0x80	; 128
    1e78:	3f 2e       	mov	r3, r31
    1e7a:	2a e0       	ldi	r18, 0x0A	; 10
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	a3 01       	movw	r20, r6
    1e80:	0e 94 67 10 	call	0x20ce	; 0x20ce <__ultoa_invert>
    1e84:	88 2e       	mov	r8, r24
    1e86:	86 18       	sub	r8, r6
    1e88:	45 c0       	rjmp	.+138    	; 0x1f14 <vfprintf+0x2ac>
    1e8a:	85 37       	cpi	r24, 0x75	; 117
    1e8c:	31 f4       	brne	.+12     	; 0x1e9a <vfprintf+0x232>
    1e8e:	23 2d       	mov	r18, r3
    1e90:	2f 7e       	andi	r18, 0xEF	; 239
    1e92:	b2 2e       	mov	r11, r18
    1e94:	2a e0       	ldi	r18, 0x0A	; 10
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	25 c0       	rjmp	.+74     	; 0x1ee4 <vfprintf+0x27c>
    1e9a:	93 2d       	mov	r25, r3
    1e9c:	99 7f       	andi	r25, 0xF9	; 249
    1e9e:	b9 2e       	mov	r11, r25
    1ea0:	8f 36       	cpi	r24, 0x6F	; 111
    1ea2:	c1 f0       	breq	.+48     	; 0x1ed4 <vfprintf+0x26c>
    1ea4:	18 f4       	brcc	.+6      	; 0x1eac <vfprintf+0x244>
    1ea6:	88 35       	cpi	r24, 0x58	; 88
    1ea8:	79 f0       	breq	.+30     	; 0x1ec8 <vfprintf+0x260>
    1eaa:	b5 c0       	rjmp	.+362    	; 0x2016 <vfprintf+0x3ae>
    1eac:	80 37       	cpi	r24, 0x70	; 112
    1eae:	19 f0       	breq	.+6      	; 0x1eb6 <vfprintf+0x24e>
    1eb0:	88 37       	cpi	r24, 0x78	; 120
    1eb2:	21 f0       	breq	.+8      	; 0x1ebc <vfprintf+0x254>
    1eb4:	b0 c0       	rjmp	.+352    	; 0x2016 <vfprintf+0x3ae>
    1eb6:	e9 2f       	mov	r30, r25
    1eb8:	e0 61       	ori	r30, 0x10	; 16
    1eba:	be 2e       	mov	r11, r30
    1ebc:	b4 fe       	sbrs	r11, 4
    1ebe:	0d c0       	rjmp	.+26     	; 0x1eda <vfprintf+0x272>
    1ec0:	fb 2d       	mov	r31, r11
    1ec2:	f4 60       	ori	r31, 0x04	; 4
    1ec4:	bf 2e       	mov	r11, r31
    1ec6:	09 c0       	rjmp	.+18     	; 0x1eda <vfprintf+0x272>
    1ec8:	34 fe       	sbrs	r3, 4
    1eca:	0a c0       	rjmp	.+20     	; 0x1ee0 <vfprintf+0x278>
    1ecc:	29 2f       	mov	r18, r25
    1ece:	26 60       	ori	r18, 0x06	; 6
    1ed0:	b2 2e       	mov	r11, r18
    1ed2:	06 c0       	rjmp	.+12     	; 0x1ee0 <vfprintf+0x278>
    1ed4:	28 e0       	ldi	r18, 0x08	; 8
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <vfprintf+0x27c>
    1eda:	20 e1       	ldi	r18, 0x10	; 16
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <vfprintf+0x27c>
    1ee0:	20 e1       	ldi	r18, 0x10	; 16
    1ee2:	32 e0       	ldi	r19, 0x02	; 2
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	b7 fe       	sbrs	r11, 7
    1ee8:	07 c0       	rjmp	.+14     	; 0x1ef8 <vfprintf+0x290>
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	0c 5f       	subi	r16, 0xFC	; 252
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef6:	06 c0       	rjmp	.+12     	; 0x1f04 <vfprintf+0x29c>
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 5f       	subi	r16, 0xFE	; 254
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	a3 01       	movw	r20, r6
    1f06:	0e 94 67 10 	call	0x20ce	; 0x20ce <__ultoa_invert>
    1f0a:	88 2e       	mov	r8, r24
    1f0c:	86 18       	sub	r8, r6
    1f0e:	fb 2d       	mov	r31, r11
    1f10:	ff 77       	andi	r31, 0x7F	; 127
    1f12:	3f 2e       	mov	r3, r31
    1f14:	36 fe       	sbrs	r3, 6
    1f16:	0d c0       	rjmp	.+26     	; 0x1f32 <vfprintf+0x2ca>
    1f18:	23 2d       	mov	r18, r3
    1f1a:	2e 7f       	andi	r18, 0xFE	; 254
    1f1c:	a2 2e       	mov	r10, r18
    1f1e:	89 14       	cp	r8, r9
    1f20:	58 f4       	brcc	.+22     	; 0x1f38 <vfprintf+0x2d0>
    1f22:	34 fe       	sbrs	r3, 4
    1f24:	0b c0       	rjmp	.+22     	; 0x1f3c <vfprintf+0x2d4>
    1f26:	32 fc       	sbrc	r3, 2
    1f28:	09 c0       	rjmp	.+18     	; 0x1f3c <vfprintf+0x2d4>
    1f2a:	83 2d       	mov	r24, r3
    1f2c:	8e 7e       	andi	r24, 0xEE	; 238
    1f2e:	a8 2e       	mov	r10, r24
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <vfprintf+0x2d4>
    1f32:	b8 2c       	mov	r11, r8
    1f34:	a3 2c       	mov	r10, r3
    1f36:	03 c0       	rjmp	.+6      	; 0x1f3e <vfprintf+0x2d6>
    1f38:	b8 2c       	mov	r11, r8
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <vfprintf+0x2d6>
    1f3c:	b9 2c       	mov	r11, r9
    1f3e:	a4 fe       	sbrs	r10, 4
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <vfprintf+0x2f8>
    1f42:	fe 01       	movw	r30, r28
    1f44:	e8 0d       	add	r30, r8
    1f46:	f1 1d       	adc	r31, r1
    1f48:	80 81       	ld	r24, Z
    1f4a:	80 33       	cpi	r24, 0x30	; 48
    1f4c:	21 f4       	brne	.+8      	; 0x1f56 <vfprintf+0x2ee>
    1f4e:	9a 2d       	mov	r25, r10
    1f50:	99 7e       	andi	r25, 0xE9	; 233
    1f52:	a9 2e       	mov	r10, r25
    1f54:	09 c0       	rjmp	.+18     	; 0x1f68 <vfprintf+0x300>
    1f56:	a2 fe       	sbrs	r10, 2
    1f58:	06 c0       	rjmp	.+12     	; 0x1f66 <vfprintf+0x2fe>
    1f5a:	b3 94       	inc	r11
    1f5c:	b3 94       	inc	r11
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <vfprintf+0x300>
    1f60:	8a 2d       	mov	r24, r10
    1f62:	86 78       	andi	r24, 0x86	; 134
    1f64:	09 f0       	breq	.+2      	; 0x1f68 <vfprintf+0x300>
    1f66:	b3 94       	inc	r11
    1f68:	a3 fc       	sbrc	r10, 3
    1f6a:	11 c0       	rjmp	.+34     	; 0x1f8e <vfprintf+0x326>
    1f6c:	a0 fe       	sbrs	r10, 0
    1f6e:	06 c0       	rjmp	.+12     	; 0x1f7c <vfprintf+0x314>
    1f70:	b2 14       	cp	r11, r2
    1f72:	88 f4       	brcc	.+34     	; 0x1f96 <vfprintf+0x32e>
    1f74:	28 0c       	add	r2, r8
    1f76:	92 2c       	mov	r9, r2
    1f78:	9b 18       	sub	r9, r11
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <vfprintf+0x330>
    1f7c:	b2 14       	cp	r11, r2
    1f7e:	60 f4       	brcc	.+24     	; 0x1f98 <vfprintf+0x330>
    1f80:	b6 01       	movw	r22, r12
    1f82:	80 e2       	ldi	r24, 0x20	; 32
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1f8a:	b3 94       	inc	r11
    1f8c:	f7 cf       	rjmp	.-18     	; 0x1f7c <vfprintf+0x314>
    1f8e:	b2 14       	cp	r11, r2
    1f90:	18 f4       	brcc	.+6      	; 0x1f98 <vfprintf+0x330>
    1f92:	2b 18       	sub	r2, r11
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <vfprintf+0x332>
    1f96:	98 2c       	mov	r9, r8
    1f98:	21 2c       	mov	r2, r1
    1f9a:	a4 fe       	sbrs	r10, 4
    1f9c:	10 c0       	rjmp	.+32     	; 0x1fbe <vfprintf+0x356>
    1f9e:	b6 01       	movw	r22, r12
    1fa0:	80 e3       	ldi	r24, 0x30	; 48
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1fa8:	a2 fe       	sbrs	r10, 2
    1faa:	17 c0       	rjmp	.+46     	; 0x1fda <vfprintf+0x372>
    1fac:	a1 fc       	sbrc	r10, 1
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <vfprintf+0x34e>
    1fb0:	88 e7       	ldi	r24, 0x78	; 120
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <vfprintf+0x352>
    1fb6:	88 e5       	ldi	r24, 0x58	; 88
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	b6 01       	movw	r22, r12
    1fbc:	0c c0       	rjmp	.+24     	; 0x1fd6 <vfprintf+0x36e>
    1fbe:	8a 2d       	mov	r24, r10
    1fc0:	86 78       	andi	r24, 0x86	; 134
    1fc2:	59 f0       	breq	.+22     	; 0x1fda <vfprintf+0x372>
    1fc4:	a1 fe       	sbrs	r10, 1
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <vfprintf+0x364>
    1fc8:	8b e2       	ldi	r24, 0x2B	; 43
    1fca:	01 c0       	rjmp	.+2      	; 0x1fce <vfprintf+0x366>
    1fcc:	80 e2       	ldi	r24, 0x20	; 32
    1fce:	a7 fc       	sbrc	r10, 7
    1fd0:	8d e2       	ldi	r24, 0x2D	; 45
    1fd2:	b6 01       	movw	r22, r12
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1fda:	89 14       	cp	r8, r9
    1fdc:	38 f4       	brcc	.+14     	; 0x1fec <vfprintf+0x384>
    1fde:	b6 01       	movw	r22, r12
    1fe0:	80 e3       	ldi	r24, 0x30	; 48
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1fe8:	9a 94       	dec	r9
    1fea:	f7 cf       	rjmp	.-18     	; 0x1fda <vfprintf+0x372>
    1fec:	8a 94       	dec	r8
    1fee:	f3 01       	movw	r30, r6
    1ff0:	e8 0d       	add	r30, r8
    1ff2:	f1 1d       	adc	r31, r1
    1ff4:	80 81       	ld	r24, Z
    1ff6:	b6 01       	movw	r22, r12
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1ffe:	81 10       	cpse	r8, r1
    2000:	f5 cf       	rjmp	.-22     	; 0x1fec <vfprintf+0x384>
    2002:	22 20       	and	r2, r2
    2004:	09 f4       	brne	.+2      	; 0x2008 <vfprintf+0x3a0>
    2006:	42 ce       	rjmp	.-892    	; 0x1c8c <vfprintf+0x24>
    2008:	b6 01       	movw	r22, r12
    200a:	80 e2       	ldi	r24, 0x20	; 32
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    2012:	2a 94       	dec	r2
    2014:	f6 cf       	rjmp	.-20     	; 0x2002 <vfprintf+0x39a>
    2016:	f6 01       	movw	r30, r12
    2018:	86 81       	ldd	r24, Z+6	; 0x06
    201a:	97 81       	ldd	r25, Z+7	; 0x07
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <vfprintf+0x3ba>
    201e:	8f ef       	ldi	r24, 0xFF	; 255
    2020:	9f ef       	ldi	r25, 0xFF	; 255
    2022:	2b 96       	adiw	r28, 0x0b	; 11
    2024:	e2 e1       	ldi	r30, 0x12	; 18
    2026:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__epilogue_restores__>

0000202a <strnlen_P>:
    202a:	fc 01       	movw	r30, r24
    202c:	05 90       	lpm	r0, Z+
    202e:	61 50       	subi	r22, 0x01	; 1
    2030:	70 40       	sbci	r23, 0x00	; 0
    2032:	01 10       	cpse	r0, r1
    2034:	d8 f7       	brcc	.-10     	; 0x202c <strnlen_P+0x2>
    2036:	80 95       	com	r24
    2038:	90 95       	com	r25
    203a:	8e 0f       	add	r24, r30
    203c:	9f 1f       	adc	r25, r31
    203e:	08 95       	ret

00002040 <strnlen>:
    2040:	fc 01       	movw	r30, r24
    2042:	61 50       	subi	r22, 0x01	; 1
    2044:	70 40       	sbci	r23, 0x00	; 0
    2046:	01 90       	ld	r0, Z+
    2048:	01 10       	cpse	r0, r1
    204a:	d8 f7       	brcc	.-10     	; 0x2042 <strnlen+0x2>
    204c:	80 95       	com	r24
    204e:	90 95       	com	r25
    2050:	8e 0f       	add	r24, r30
    2052:	9f 1f       	adc	r25, r31
    2054:	08 95       	ret

00002056 <fputc>:
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	fb 01       	movw	r30, r22
    2060:	23 81       	ldd	r18, Z+3	; 0x03
    2062:	21 fd       	sbrc	r18, 1
    2064:	03 c0       	rjmp	.+6      	; 0x206c <fputc+0x16>
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	9f ef       	ldi	r25, 0xFF	; 255
    206a:	2c c0       	rjmp	.+88     	; 0x20c4 <fputc+0x6e>
    206c:	22 ff       	sbrs	r18, 2
    206e:	16 c0       	rjmp	.+44     	; 0x209c <fputc+0x46>
    2070:	46 81       	ldd	r20, Z+6	; 0x06
    2072:	57 81       	ldd	r21, Z+7	; 0x07
    2074:	24 81       	ldd	r18, Z+4	; 0x04
    2076:	35 81       	ldd	r19, Z+5	; 0x05
    2078:	42 17       	cp	r20, r18
    207a:	53 07       	cpc	r21, r19
    207c:	44 f4       	brge	.+16     	; 0x208e <fputc+0x38>
    207e:	a0 81       	ld	r26, Z
    2080:	b1 81       	ldd	r27, Z+1	; 0x01
    2082:	9d 01       	movw	r18, r26
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	31 83       	std	Z+1, r19	; 0x01
    208a:	20 83       	st	Z, r18
    208c:	8c 93       	st	X, r24
    208e:	26 81       	ldd	r18, Z+6	; 0x06
    2090:	37 81       	ldd	r19, Z+7	; 0x07
    2092:	2f 5f       	subi	r18, 0xFF	; 255
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	37 83       	std	Z+7, r19	; 0x07
    2098:	26 83       	std	Z+6, r18	; 0x06
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <fputc+0x6e>
    209c:	8b 01       	movw	r16, r22
    209e:	ec 01       	movw	r28, r24
    20a0:	fb 01       	movw	r30, r22
    20a2:	00 84       	ldd	r0, Z+8	; 0x08
    20a4:	f1 85       	ldd	r31, Z+9	; 0x09
    20a6:	e0 2d       	mov	r30, r0
    20a8:	09 95       	icall
    20aa:	89 2b       	or	r24, r25
    20ac:	e1 f6       	brne	.-72     	; 0x2066 <fputc+0x10>
    20ae:	d8 01       	movw	r26, r16
    20b0:	16 96       	adiw	r26, 0x06	; 6
    20b2:	8d 91       	ld	r24, X+
    20b4:	9c 91       	ld	r25, X
    20b6:	17 97       	sbiw	r26, 0x07	; 7
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	17 96       	adiw	r26, 0x07	; 7
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
    20c0:	16 97       	sbiw	r26, 0x06	; 6
    20c2:	ce 01       	movw	r24, r28
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	08 95       	ret

000020ce <__ultoa_invert>:
    20ce:	fa 01       	movw	r30, r20
    20d0:	aa 27       	eor	r26, r26
    20d2:	28 30       	cpi	r18, 0x08	; 8
    20d4:	51 f1       	breq	.+84     	; 0x212a <__ultoa_invert+0x5c>
    20d6:	20 31       	cpi	r18, 0x10	; 16
    20d8:	81 f1       	breq	.+96     	; 0x213a <__ultoa_invert+0x6c>
    20da:	e8 94       	clt
    20dc:	6f 93       	push	r22
    20de:	6e 7f       	andi	r22, 0xFE	; 254
    20e0:	6e 5f       	subi	r22, 0xFE	; 254
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	8f 4f       	sbci	r24, 0xFF	; 255
    20e6:	9f 4f       	sbci	r25, 0xFF	; 255
    20e8:	af 4f       	sbci	r26, 0xFF	; 255
    20ea:	b1 e0       	ldi	r27, 0x01	; 1
    20ec:	3e d0       	rcall	.+124    	; 0x216a <__ultoa_invert+0x9c>
    20ee:	b4 e0       	ldi	r27, 0x04	; 4
    20f0:	3c d0       	rcall	.+120    	; 0x216a <__ultoa_invert+0x9c>
    20f2:	67 0f       	add	r22, r23
    20f4:	78 1f       	adc	r23, r24
    20f6:	89 1f       	adc	r24, r25
    20f8:	9a 1f       	adc	r25, r26
    20fa:	a1 1d       	adc	r26, r1
    20fc:	68 0f       	add	r22, r24
    20fe:	79 1f       	adc	r23, r25
    2100:	8a 1f       	adc	r24, r26
    2102:	91 1d       	adc	r25, r1
    2104:	a1 1d       	adc	r26, r1
    2106:	6a 0f       	add	r22, r26
    2108:	71 1d       	adc	r23, r1
    210a:	81 1d       	adc	r24, r1
    210c:	91 1d       	adc	r25, r1
    210e:	a1 1d       	adc	r26, r1
    2110:	20 d0       	rcall	.+64     	; 0x2152 <__ultoa_invert+0x84>
    2112:	09 f4       	brne	.+2      	; 0x2116 <__ultoa_invert+0x48>
    2114:	68 94       	set
    2116:	3f 91       	pop	r19
    2118:	2a e0       	ldi	r18, 0x0A	; 10
    211a:	26 9f       	mul	r18, r22
    211c:	11 24       	eor	r1, r1
    211e:	30 19       	sub	r19, r0
    2120:	30 5d       	subi	r19, 0xD0	; 208
    2122:	31 93       	st	Z+, r19
    2124:	de f6       	brtc	.-74     	; 0x20dc <__ultoa_invert+0xe>
    2126:	cf 01       	movw	r24, r30
    2128:	08 95       	ret
    212a:	46 2f       	mov	r20, r22
    212c:	47 70       	andi	r20, 0x07	; 7
    212e:	40 5d       	subi	r20, 0xD0	; 208
    2130:	41 93       	st	Z+, r20
    2132:	b3 e0       	ldi	r27, 0x03	; 3
    2134:	0f d0       	rcall	.+30     	; 0x2154 <__ultoa_invert+0x86>
    2136:	c9 f7       	brne	.-14     	; 0x212a <__ultoa_invert+0x5c>
    2138:	f6 cf       	rjmp	.-20     	; 0x2126 <__ultoa_invert+0x58>
    213a:	46 2f       	mov	r20, r22
    213c:	4f 70       	andi	r20, 0x0F	; 15
    213e:	40 5d       	subi	r20, 0xD0	; 208
    2140:	4a 33       	cpi	r20, 0x3A	; 58
    2142:	18 f0       	brcs	.+6      	; 0x214a <__ultoa_invert+0x7c>
    2144:	49 5d       	subi	r20, 0xD9	; 217
    2146:	31 fd       	sbrc	r19, 1
    2148:	40 52       	subi	r20, 0x20	; 32
    214a:	41 93       	st	Z+, r20
    214c:	02 d0       	rcall	.+4      	; 0x2152 <__ultoa_invert+0x84>
    214e:	a9 f7       	brne	.-22     	; 0x213a <__ultoa_invert+0x6c>
    2150:	ea cf       	rjmp	.-44     	; 0x2126 <__ultoa_invert+0x58>
    2152:	b4 e0       	ldi	r27, 0x04	; 4
    2154:	a6 95       	lsr	r26
    2156:	97 95       	ror	r25
    2158:	87 95       	ror	r24
    215a:	77 95       	ror	r23
    215c:	67 95       	ror	r22
    215e:	ba 95       	dec	r27
    2160:	c9 f7       	brne	.-14     	; 0x2154 <__ultoa_invert+0x86>
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	61 05       	cpc	r22, r1
    2166:	71 05       	cpc	r23, r1
    2168:	08 95       	ret
    216a:	9b 01       	movw	r18, r22
    216c:	ac 01       	movw	r20, r24
    216e:	0a 2e       	mov	r0, r26
    2170:	06 94       	lsr	r0
    2172:	57 95       	ror	r21
    2174:	47 95       	ror	r20
    2176:	37 95       	ror	r19
    2178:	27 95       	ror	r18
    217a:	ba 95       	dec	r27
    217c:	c9 f7       	brne	.-14     	; 0x2170 <__ultoa_invert+0xa2>
    217e:	62 0f       	add	r22, r18
    2180:	73 1f       	adc	r23, r19
    2182:	84 1f       	adc	r24, r20
    2184:	95 1f       	adc	r25, r21
    2186:	a0 1d       	adc	r26, r0
    2188:	08 95       	ret

0000218a <__prologue_saves__>:
    218a:	2f 92       	push	r2
    218c:	3f 92       	push	r3
    218e:	4f 92       	push	r4
    2190:	5f 92       	push	r5
    2192:	6f 92       	push	r6
    2194:	7f 92       	push	r7
    2196:	8f 92       	push	r8
    2198:	9f 92       	push	r9
    219a:	af 92       	push	r10
    219c:	bf 92       	push	r11
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	ca 1b       	sub	r28, r26
    21b4:	db 0b       	sbc	r29, r27
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	09 94       	ijmp

000021c2 <__epilogue_restores__>:
    21c2:	2a 88       	ldd	r2, Y+18	; 0x12
    21c4:	39 88       	ldd	r3, Y+17	; 0x11
    21c6:	48 88       	ldd	r4, Y+16	; 0x10
    21c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    21cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    21ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    21d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    21d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    21d4:	b9 84       	ldd	r11, Y+9	; 0x09
    21d6:	c8 84       	ldd	r12, Y+8	; 0x08
    21d8:	df 80       	ldd	r13, Y+7	; 0x07
    21da:	ee 80       	ldd	r14, Y+6	; 0x06
    21dc:	fd 80       	ldd	r15, Y+5	; 0x05
    21de:	0c 81       	ldd	r16, Y+4	; 0x04
    21e0:	1b 81       	ldd	r17, Y+3	; 0x03
    21e2:	aa 81       	ldd	r26, Y+2	; 0x02
    21e4:	b9 81       	ldd	r27, Y+1	; 0x01
    21e6:	ce 0f       	add	r28, r30
    21e8:	d1 1d       	adc	r29, r1
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	ed 01       	movw	r28, r26
    21f6:	08 95       	ret

000021f8 <_exit>:
    21f8:	f8 94       	cli

000021fa <__stop_program>:
    21fa:	ff cf       	rjmp	.-2      	; 0x21fa <__stop_program>
